"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DFIFactory = void 0;
const whale_api_wallet_1 = require("@defichain/whale-api-wallet");
const jellyfish_wallet_1 = require("@defichain/jellyfish-wallet");
const jellyfish_wallet_mnemonic_1 = require("@defichain/jellyfish-wallet-mnemonic");
const SEED_PHRASE_LENGTH = 24;
/**
 * Provides some standard methods to interact with the JellyWallet API.
 */
class DFIFactory {
    static getAccount(dfiWallet, seed, passphrase) {
        return __awaiter(this, void 0, void 0, function* () {
            const wallet = DFIFactory.getWallet(yield seed.asArray(passphrase), dfiWallet.getNetwork(), dfiWallet.getClient());
            const accounts = yield wallet.wallet.discover();
            if (accounts.length === 0)
                throw new Error("No accounts found for the given account. Please check your seed phrase or make sure you have at least one transaction in that wallet.");
            wallet.account = undefined;
            for (let i = 0; i < accounts.length; i++) {
                const account = accounts[i];
                const address = yield account.getAddress();
                if (address === dfiWallet.getAddress()) {
                    wallet.account = account;
                    break;
                }
            }
            if (!wallet.account) {
                throw new Error(`Your given address (${dfiWallet.getAddress()}) was not found on the wallet. Please check your config.`);
            }
            return wallet.account;
        });
    }
    /**
     * Returns an instance of the Jellywallet to interact with the wallet.
     *
     * @param seed The seed as 24-word-string-array.
     * @param network The network to use.
     * @param client the {@link WhaleApiClient}
     * @returns The Jellywallet object.
     */
    static getWallet(seed, network, client) {
        if (seed && seed.length === SEED_PHRASE_LENGTH) {
            return {
                wallet: new jellyfish_wallet_1.JellyfishWallet(jellyfish_wallet_mnemonic_1.MnemonicHdNodeProvider.fromWords(seed, DFIFactory.bip32Options(network), true), new whale_api_wallet_1.WhaleWalletAccountProvider(client, network)),
            };
        }
        else {
            throw new Error(`Please check your seedphrase (length: ${seed === null || seed === void 0 ? void 0 : seed.length}). It does not seem to be valid!`);
        }
    }
    /**
     * The DeFiChain Bip32 Options to use for this wallet.
     * @param network The network to use.
     * @returns The BIP32 options for the given DeFiChain network.
     */
    static bip32Options(network) {
        return {
            bip32: {
                public: network.bip32.publicPrefix,
                private: network.bip32.privatePrefix,
            },
            wif: network.wifPrefix,
        };
    }
}
exports.DFIFactory = DFIFactory;
