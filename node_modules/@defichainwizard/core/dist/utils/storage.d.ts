interface StorageUtility {
    getAddress: () => string;
    getCurrentVault: () => string;
    getNetwork: () => string;
    getSeed: () => string;
    storeNetwork: (network: string) => void;
    storeSeed: (seed: string) => void;
    storeCurrentVault: (vault: string) => void;
    storeAddress: (address: string) => void;
}
/**
 * Takes care of storing data in the specified storage.
 */
declare class DFIStorageUtility implements StorageUtility {
    /**
     * Returns the DFI wallet address from the local storage.
     * @returns the DFI wallet address from local storage.
     */
    getAddress(): string;
    /**
     * Stores the DFI wallet address in the local storage.
     * @param address The DFI wallet address to store.
     */
    storeAddress(address: string): void;
    /**
     * Returns the network from the local storage.
     * @returns the network from local storage.
     */
    getNetwork(): string;
    /**
     * Stores the network in the local storage.
     * @param network The network to store.
     */
    storeNetwork(network: string): void;
    /**
     * Returns the encrypted seed from the local storage.
     * @returns the encrypted seed from local storage.
     */
    getSeed(): string;
    /**
     * Stores the encrypted seed in the local storage.
     * @param seed The encrypted seed to store.
     */
    storeSeed(seed: string): void;
    /**
     * Returns the current vault id from the local storage.
     * @returns the current vault id from local storage.
     */
    getCurrentVault(): string;
    /**
     * Stores the current vault id in the local storage.
     * @param vault The  current vault id to store.
     */
    storeCurrentVault(vault: string): void;
}
export { DFIStorageUtility };
