"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MnemonicStorage = void 0;
const jellyfish_wallet_encrypted_1 = require("@defichain/jellyfish-wallet-encrypted");
const jellyfish_wallet_mnemonic_1 = require("@defichain/jellyfish-wallet-mnemonic");
const helpers_1 = require("./helpers");
const KEY = "ENCRYPTED_MNEMONIC_STORAGE.entropy";
/**
 * Raw mnemonic words encryption implementation reside in light wallet
 */
class EncryptedMnemonicStorage {
    constructor() {
        this.encryption = new jellyfish_wallet_encrypted_1.PrivateKeyEncryption(new jellyfish_wallet_encrypted_1.Scrypt(), () => {
            var array = new Uint16Array(16);
            return Buffer.from(crypto.getRandomValues(array));
        });
    }
    /**
     * Encrypt mnemonic words, and store into persistent storage.
     *
     * @param {string[]} words
     * @param {string} passphrase
     */
    encrypt(words, passphrase) {
        return __awaiter(this, void 0, void 0, function* () {
            const buffer = (0, jellyfish_wallet_mnemonic_1.mnemonicAsEntropy)(words);
            const encryptedData = yield this.encryption.encrypt(buffer, passphrase);
            const encoded = encryptedData.encode();
            return encoded;
        });
    }
    /**
     * Retrieve encrypted value from secure store, deserialize, decrypt, deserialize buffer (decryption result) into words array
     *
     * @param {string} passphrase
     * @returns {string[]}
     */
    decrypt(encrypted, passphrase) {
        return __awaiter(this, void 0, void 0, function* () {
            if ((0, helpers_1.isStringNullOrEmpty)(encrypted)) {
                throw new Error("Seed to decrypt is not valid!");
            }
            const buffer = yield this.encryption.decrypt(encrypted, passphrase);
            return (0, jellyfish_wallet_mnemonic_1.entropyAsMnemonic)(buffer);
        });
    }
}
exports.MnemonicStorage = new EncryptedMnemonicStorage();
