"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DFIStorageUtility = void 0;
const localstorage_slim_1 = __importDefault(require("localstorage-slim"));
const SEED_KEY = "seed", ADDRESS_KEY = "address", NETWORK_KEY = "network", VAULT_KEY = "vault";
/**
 * Takes care of storing data in the specified storage.
 */
class DFIStorageUtility {
    /**
     * Returns the DFI wallet address from the local storage.
     * @returns the DFI wallet address from local storage.
     */
    getAddress() {
        return `${localstorage_slim_1.default.get(ADDRESS_KEY)}`;
    }
    /**
     * Stores the DFI wallet address in the local storage.
     * @param address The DFI wallet address to store.
     */
    storeAddress(address) {
        localstorage_slim_1.default.set(ADDRESS_KEY, address);
    }
    /**
     * Returns the network from the local storage.
     * @returns the network from local storage.
     */
    getNetwork() {
        return `${localstorage_slim_1.default.get(NETWORK_KEY)}`;
    }
    /**
     * Stores the network in the local storage.
     * @param network The network to store.
     */
    storeNetwork(network) {
        localstorage_slim_1.default.set(NETWORK_KEY, network);
    }
    /**
     * Returns the encrypted seed from the local storage.
     * @returns the encrypted seed from local storage.
     */
    getSeed() {
        return `${localstorage_slim_1.default.get(SEED_KEY)}`;
    }
    /**
     * Stores the encrypted seed in the local storage.
     * @param seed The encrypted seed to store.
     */
    storeSeed(seed) {
        localstorage_slim_1.default.set(SEED_KEY, seed);
    }
    /**
     * Returns the current vault id from the local storage.
     * @returns the current vault id from local storage.
     */
    getCurrentVault() {
        return `${localstorage_slim_1.default.get(VAULT_KEY)}`;
    }
    /**
     * Stores the current vault id in the local storage.
     * @param vault The  current vault id to store.
     */
    storeCurrentVault(vault) {
        localstorage_slim_1.default.set(VAULT_KEY, vault);
    }
}
exports.DFIStorageUtility = DFIStorageUtility;
