import { Network } from "@defichain/jellyfish-network";
import { WhaleApiClient } from "@defichain/whale-api-client";
import { LoanVaultActive } from "@defichain/whale-api-client/dist/api/loan";
import { Seed } from "./seed";
import { AddressToken } from "@defichain/whale-api-client/dist/api/address";
import { CustomMessage } from "@defichainwizard/custom-transactions";
/**
 * The DFI Wallet interface.
 */
interface DFIWallet {
    getAddress: () => string;
    getNetworkAsString: () => string;
    getVaults: () => Promise<LoanVaultActive[]>;
    getVault: (id: string) => Promise<LoanVaultActive>;
    getCurrentVault: () => Promise<LoanVaultActive>;
    listTokens: () => Promise<AddressToken[]>;
    getUTXOBalance: () => Promise<Number>;
    setCurrentVault: (id: string) => void;
    sendTransaction: (message: CustomMessage, seed: Seed, passphrase: string) => void;
}
/**
 * The DFIWallet offers all functions to interact with the DFIWallet.
 */
declare class Wallet implements DFIWallet {
    private readonly storage;
    private readonly client;
    private readonly network;
    /**
     * The DFI Wallet Address and the network is needed to instantiate the wallet.
     *
     * @param address the DFI wallet address
     * @param network the network as string (e.g. mainnet, testnet)
     */
    constructor(address: string, network?: string);
    /**
     * Returns the current {@link WhaleApiClient}.
     * @returns The current {@link WhaleApiClient}.
     */
    getClient(): WhaleApiClient;
    /**
     * Returns the network used for this wallet ('mainnet', 'testnet',...) as string.
     * @returns The network used for this wallet as string.
     */
    getNetworkAsString(): string;
    /**
     * Returns the {@link Network} used for this wallet ('mainnet', 'testnet',...).
     * @returns The network used for this wallet.
     */
    getNetwork(): Network;
    /**
     * Returns the address used for this wallet. Usually starts with 'df1...'.
     * @returns The address used for this wallet.
     */
    getAddress(): string;
    /**
     * Returns a certain vault used for this wallet.
     * @param id The ID of the vault to be used.
     * @returns The vault used for this wallet.
     */
    getVault(id: string): Promise<LoanVaultActive>;
    /**
     * Returns the current vault.
     * @returns The vault currently stored vault to be used for management.
     */
    getCurrentVault(): Promise<LoanVaultActive>;
    /**
     * Stores the current vault to be managed by the wizard.
     * @param id The id of the vault to be used as current vault.
     */
    setCurrentVault(id: string): void;
    /**
     * Sends a custom transaction to your address, so that the backend can pick it up.
     * @param message The {@link CustomMessage} to send
     * @param seed The seed object.
     * @param passphrase The passphrase to decrypt the seed.
     * @returns the transcation id.
     */
    sendTransaction(message: CustomMessage, seed: Seed, passphrase: string): Promise<string>;
    /**
     * Returns {@link LoanVaultActive} if vault is in active state.
     *
     * Info: This is an internal type guard to make sure that only active vaults will be displayed to the user.
     *
     * @param vault the vault to be checked
     * @returns {@link LoanVaultActive} if vault is in active state.
     */
    private isActive;
    /**
     * Returns all vaults that have been created in this wallet.
     * @returns All vaults found for this wallet.
     */
    getVaults(): Promise<LoanVaultActive[]>;
    /**
     * Returns a list of tokens stored in the wallet.
     *
     * @returns An array of tokens that are stored in the wallet.
     */
    listTokens(): Promise<AddressToken[]>;
    /**
     * Returns the UTXO Balance of the wallet.
     * @returns The UTXO Balance of the wallet.
     */
    getUTXOBalance(): Promise<Number>;
}
export { Wallet };
