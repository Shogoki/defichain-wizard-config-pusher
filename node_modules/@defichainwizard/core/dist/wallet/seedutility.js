"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DFISeedUtility = void 0;
const mnemonicstorage_1 = require("../blockchain/mnemonicstorage");
const storage_1 = require("../utils/storage");
class DFISeedUtility {
    constructor() {
        this.storage = new storage_1.DFIStorageUtility();
    }
    /**
     * Returns the seed as array.
     * @param passphrase The passphrase to decrypt the seed.
     * @returns the seed as array.
     */
    getSeedAsArray(passphrase) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield mnemonicstorage_1.MnemonicStorage.decrypt(this.storage.getSeed(), passphrase);
        });
    }
    /**
     * Returns the seed as comma-separated string.
     * @param passphrase The passphrase to decrypt the seed.
     * @returns the seed as comma-separated string.
     */
    getSeedAsString(passphrase) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield mnemonicstorage_1.MnemonicStorage.decrypt(this.storage.getSeed(), passphrase)).join(",");
        });
    }
    /**
     * Returns the encrypted seed as stored.
     * @returns the encyrpted seed.
     */
    getSeedEncrypted() {
        return this.storage.getSeed();
    }
    /**
     * Overwrites the seed that has been set before.
     * @param seed The seed as array of words.
     * @param passphrase The passphrase to encrypt the seed.
     */
    setSeed(seed, passphrase) {
        return __awaiter(this, void 0, void 0, function* () {
            // clean up seed first
            const seedCleanedUp = seed.map((words) => words.trim());
            //store now
            this.storage.storeSeed(yield mnemonicstorage_1.MnemonicStorage.encrypt(seedCleanedUp, passphrase));
        });
    }
}
exports.DFISeedUtility = DFISeedUtility;
