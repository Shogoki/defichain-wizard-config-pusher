/**
 * This SeedUtility provides all operations for the seed management. It will implicitely encrypt the seed.
 */
interface SeedUtility {
    getSeedAsArray: (passphrase: string) => Promise<string[]>;
    getSeedAsString: (passphrase: string) => Promise<string>;
    getSeedEncrypted: () => string;
    setSeed: (seedPhrase: string[], passphrase: string) => void;
}
declare class DFISeedUtility implements SeedUtility {
    private storage;
    /**
     * Returns the seed as array.
     * @param passphrase The passphrase to decrypt the seed.
     * @returns the seed as array.
     */
    getSeedAsArray(passphrase: string): Promise<string[]>;
    /**
     * Returns the seed as comma-separated string.
     * @param passphrase The passphrase to decrypt the seed.
     * @returns the seed as comma-separated string.
     */
    getSeedAsString(passphrase: string): Promise<string>;
    /**
     * Returns the encrypted seed as stored.
     * @returns the encyrpted seed.
     */
    getSeedEncrypted(): string;
    /**
     * Overwrites the seed that has been set before.
     * @param seed The seed as array of words.
     * @param passphrase The passphrase to encrypt the seed.
     */
    setSeed(seed: string[], passphrase: string): Promise<void>;
}
export { DFISeedUtility };
