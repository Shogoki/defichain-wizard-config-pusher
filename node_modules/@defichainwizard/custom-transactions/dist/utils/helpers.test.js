"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const helpers_1 = require("./helpers");
describe("Testing TS type guards", () => {
    test("test if version message can be recognized", () => {
        const versionMessage = {
            version: "1.0",
        };
        const wrongVersionMessage = {
            doesNotExist: "1.0",
        };
        const wrongVersionMessage2 = {};
        const customMessage = {
            version: "1.0",
            vaultId: "dsafasdfasdfasdfasd",
            pause: 0,
            compounding: {
                threshold: 1,
                mode: 1,
                token: "DFI",
            },
            poolpairs: {},
            rules: { keepMaxRatio: 150, keepMinRatio: 160 },
            telegram: { receiver: "rest", key: "1" },
        };
        expect((0, helpers_1.isCustomMessage)(versionMessage)).toBeFalsy();
        expect((0, helpers_1.isVersionMessage)(versionMessage)).toBeTruthy();
        expect((0, helpers_1.isVersionMessage)(wrongVersionMessage)).toBeFalsy();
        expect((0, helpers_1.isVersionMessage)(wrongVersionMessage2)).toBeFalsy();
        expect((0, helpers_1.isVersionMessage)(customMessage)).toBeFalsy();
    });
    test("test if custom message can be recognized", () => {
        const customMessage = {
            version: "1.0",
            vaultId: "dsafasdfasdfasdfasd",
            pause: 0,
            compounding: {
                threshold: 1,
                mode: 1,
                token: "DFI",
            },
            poolpairs: {},
            rules: { keepMaxRatio: 150, keepMinRatio: 160 },
            telegram: { receiver: "rest", key: "1" },
        };
        const wrongCustomMessage = {
            version: "1.0",
            pause: 0,
            compounding: {
                threshold: 1,
                mode: 1,
                token: "DFI",
            },
            poolpairs: {},
            rules: { keepMaxRatio: 150, keepMinRatio: 160 },
            telegram: { receiver: "rest", key: "1" },
        };
        const wrongCustomMessage2 = {
            version: "1.0",
            vaultId: "dsafasdfasdfasdfasd",
            pause: 0,
            compounding: {
                threshold: 1,
                mode: 1,
                token: "DFI",
            },
            rules: { keepMaxRatio: 150, keepMinRatio: 160 },
            telegram: { receiver: "rest", key: "1" },
        };
        const wrongCustomMessage3 = {};
        const versionMessage = {
            version: "1.0",
        };
        expect((0, helpers_1.isCustomMessage)(customMessage)).toBeTruthy();
        expect((0, helpers_1.isVersionMessage)(customMessage)).toBeFalsy();
        expect((0, helpers_1.isCustomMessage)(wrongCustomMessage)).toBeFalsy();
        expect((0, helpers_1.isCustomMessage)(wrongCustomMessage2)).toBeFalsy();
        expect((0, helpers_1.isCustomMessage)(wrongCustomMessage3)).toBeFalsy();
        expect((0, helpers_1.isCustomMessage)(versionMessage)).toBeFalsy();
    });
});
describe("Testing transcation identifier removal", () => {
    test("remove WzTx", () => {
        const testString = "ThisIsJustATest";
        let testStringWithTxId = `${helpers_1.WIZARD_TRANSACTION_CONFIG_PREFIX}${testString}`;
        expect((0, helpers_1.removeTXPrefix)(testStringWithTxId)).toBe(testString);
        testStringWithTxId = `${testString}${helpers_1.WIZARD_TRANSACTION_CONFIG_PREFIX}`;
        expect((0, helpers_1.removeTXPrefix)(testStringWithTxId)).not.toBe(testString);
        expect((0, helpers_1.removeTXPrefix)(testStringWithTxId)).toBe(testStringWithTxId);
    });
    test("remove WzVx", () => {
        const testString = "ThisIsJustATest";
        let testStringWithTxId = `${helpers_1.WIZARD_TRANSACTION_VERSION_PREFIX}${testString}`;
        expect((0, helpers_1.removeTXPrefix)(testStringWithTxId)).toBe(testString);
        testStringWithTxId = `${testString}${helpers_1.WIZARD_TRANSACTION_VERSION_PREFIX}`;
        expect((0, helpers_1.removeTXPrefix)(testStringWithTxId)).not.toBe(testString);
        expect((0, helpers_1.removeTXPrefix)(testStringWithTxId)).toBe(testStringWithTxId);
    });
});
