"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockScanner = void 0;
class BlockScanner {
    /**
     * The constructor takes the transaction configuration {@link TransactionConfig}.
     *
     * @param config The transaction configuration object
     */
    constructor(config) {
        this.client = config.client;
        this.address = config.address;
    }
    /**
     * Retrieves the last config for this bot. This could either be a {@link CustomMessage} or a {@link Version}.
     *
     * @param numberOfTransactions The number of transactions to check back in one rush (paging)
     * @returns The latest transaction found for this address
     */
    findLastBlockchainConfiguration(numberOfTransactions = 500) {
        return __awaiter(this, void 0, void 0, function* () {
            let next;
            let myTXs;
            do {
                myTXs = yield this.client.address.listTransaction(this.address, numberOfTransactions, next);
                // only keep VOUT transactions - we don't care about others
                let myVoutTXs = myTXs.filter((tx) => tx.type === "vout");
                console.log(myTXs);
                console.log(myVoutTXs);
                // ....
                // .... Check for WZ Config and return if found
                // ....
                next = myTXs.nextToken;
            } while (myTXs.hasNext);
            return null;
        });
    }
}
exports.BlockScanner = BlockScanner;
