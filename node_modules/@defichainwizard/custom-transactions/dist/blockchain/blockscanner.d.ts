import { WhaleApiClient } from "@defichain/whale-api-client";
import { CustomMessage } from "../transactions";
interface DecryptedConfig {
    blockTime: number;
    config: CustomMessage;
}
interface BlockScannerConfig {
    client: WhaleApiClient;
    address: string;
}
declare class BlockScanner {
    private readonly client;
    private readonly address;
    /**
     * The constructor takes the transaction configuration {@link TransactionConfig}.
     *
     * @param config The transaction configuration object
     */
    constructor(config: BlockScannerConfig);
    /**
     * Retrieves the last config for this bot. This could either be a {@link CustomMessage} or a {@link Version}.
     *
     * @param numberOfTransactions The number of transactions to check back in one rush (paging)
     * @returns The latest transaction found for this address
     */
    findLastBlockchainConfiguration(numberOfTransactions?: number): Promise<DecryptedConfig | null>;
}
export { BlockScanner, BlockScannerConfig };
