import { WalletAccount, WalletAccountProvider, WalletEllipticPair } from '@defichain/jellyfish-wallet';
import { WhaleApiClient } from '@defichain/whale-api-client';
import { Network } from '@defichain/jellyfish-network';
import { P2WPKHTransactionBuilder } from '@defichain/jellyfish-transaction-builder';
import { WhaleFeeRateProvider } from './feerate';
import { WhalePrevoutProvider } from './prevout';
export declare class WhaleWalletAccount extends WalletAccount {
    readonly client: WhaleApiClient;
    protected readonly feeRateProvider: WhaleFeeRateProvider;
    protected readonly prevoutProvider: WhalePrevoutProvider;
    constructor(client: WhaleApiClient, walletEllipticPair: WalletEllipticPair, network: Network, prevoutSize?: number);
    isActive(): Promise<boolean>;
    withTransactionBuilder(): P2WPKHTransactionBuilder;
}
export declare class WhaleWalletAccountProvider implements WalletAccountProvider<WhaleWalletAccount> {
    protected readonly client: WhaleApiClient;
    protected readonly network: Network;
    constructor(client: WhaleApiClient, network: Network);
    provide(walletEllipticPair: WalletEllipticPair): WhaleWalletAccount;
}
//# sourceMappingURL=wallet.d.ts.map