"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WhaleWalletAccountProvider = exports.WhaleWalletAccount = void 0;
const jellyfish_wallet_1 = require("@defichain/jellyfish-wallet");
const jellyfish_transaction_builder_1 = require("@defichain/jellyfish-transaction-builder");
const feerate_1 = require("./feerate");
const prevout_1 = require("./prevout");
class WhaleWalletAccount extends jellyfish_wallet_1.WalletAccount {
    constructor(client, walletEllipticPair, network, prevoutSize = 200) {
        super(walletEllipticPair, network);
        this.client = client;
        this.feeRateProvider = new feerate_1.WhaleFeeRateProvider(client);
        this.prevoutProvider = new prevout_1.WhalePrevoutProvider(this, prevoutSize);
    }
    isActive() {
        return __awaiter(this, void 0, void 0, function* () {
            const address = yield this.getAddress();
            const agg = yield this.client.address.getAggregation(address);
            return agg !== undefined;
        });
    }
    withTransactionBuilder() {
        return new jellyfish_transaction_builder_1.P2WPKHTransactionBuilder(this.feeRateProvider, this.prevoutProvider, {
            get: (_) => this
        }, this.network);
    }
}
exports.WhaleWalletAccount = WhaleWalletAccount;
class WhaleWalletAccountProvider {
    constructor(client, network) {
        this.client = client;
        this.network = network;
    }
    provide(walletEllipticPair) {
        return new WhaleWalletAccount(this.client, walletEllipticPair, this.network);
    }
}
exports.WhaleWalletAccountProvider = WhaleWalletAccountProvider;
//# sourceMappingURL=wallet.js.map