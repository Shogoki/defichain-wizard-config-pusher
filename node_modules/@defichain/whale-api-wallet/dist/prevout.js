"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WhalePrevoutProvider = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const smart_buffer_1 = require("smart-buffer");
const jellyfish_transaction_1 = require("@defichain/jellyfish-transaction");
class WhalePrevoutProvider {
    /**
     * @param {WhaleWalletAccount} account to read prevout from
     * @param {number} size max size of prevout to read from all, prevout availability is limited by this
     */
    constructor(account, size) {
        this.account = account;
        this.size = size;
    }
    all() {
        return __awaiter(this, void 0, void 0, function* () {
            const address = yield this.account.getAddress();
            const unspent = yield this.account.client.address.listTransactionUnspent(address, this.size);
            return unspent.map((item) => {
                var _a;
                return {
                    txid: item.vout.txid,
                    vout: item.vout.n,
                    value: new bignumber_js_1.default(item.vout.value),
                    script: {
                        // TODO(fuxingloh): needs to refactor once jellyfish refactor this.
                        stack: jellyfish_transaction_1.toOPCodes(smart_buffer_1.SmartBuffer.fromBuffer(Buffer.from(item.script.hex, 'hex')))
                    },
                    tokenId: (_a = item.vout.tokenId) !== null && _a !== void 0 ? _a : 0x00
                };
            });
        });
    }
    collect(minBalance) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO(fuxingloh): min balance filtering
            return yield this.all();
        });
    }
}
exports.WhalePrevoutProvider = WhalePrevoutProvider;
//# sourceMappingURL=prevout.js.map