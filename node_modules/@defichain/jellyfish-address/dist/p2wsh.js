"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.P2WSH = void 0;
const bech32_1 = require("bech32");
const jellyfish_network_1 = require("@defichain/jellyfish-network");
const jellyfish_transaction_1 = require("@defichain/jellyfish-transaction");
const bech32_address_1 = require("./bech32_address");
class P2WSH extends bech32_address_1.Bech32Address {
    constructor(network, utf8String, data, validated = false) {
        super(network, utf8String, validated, 'P2WSH');
        this.data = data;
    }
    // bcrt1ncd7qa2cafwv3cpw68vqczg3qj904k2f4lard4wrj50rzkwmagvs3ttd5f
    validators() {
        return [
            ...super.validators(),
            () => (this.utf8String.length <= P2WSH.MAX_LENGTH),
            () => (this.data.length === P2WSH.SCRIPT_HASH_LENGTH)
        ];
    }
    getScript() {
        if (!this.valid) {
            this.validate();
        }
        if (!this.valid) {
            throw new Error('InvalidDefiAddress');
        }
        return {
            stack: [
                jellyfish_transaction_1.OP_CODES.OP_0,
                new jellyfish_transaction_1.OP_PUSHDATA(Buffer.from(this.data, 'hex'), 'little')
            ]
        };
    }
    /**
     * @param net network
     * @param hex data, redeem script (32 bytes, 64 characters)
     * @param witnessVersion default 0
     * @returns
     */
    static to(net, hex, witnessVersion = 0x00) {
        const network = typeof net === 'string' ? jellyfish_network_1.getNetwork(net) : net;
        if (hex.length !== P2WSH.SCRIPT_HASH_LENGTH) {
            throw new Error('InvalidScriptHashLength');
        }
        const numbers = Buffer.from(hex, 'hex');
        const fiveBitsWords = bech32_1.bech32.toWords(numbers);
        const includeVersion = [witnessVersion, ...fiveBitsWords];
        const utf8 = bech32_1.bech32.encode(network.bech32.hrp, includeVersion);
        return new P2WSH(network, utf8, hex, true);
    }
}
exports.P2WSH = P2WSH;
// the raw utf8, eg bc1...
// supposed to be 62, regtest prefix is longer
P2WSH.MAX_LENGTH = 64;
P2WSH.SCRIPT_HASH_LENGTH = 64;
//# sourceMappingURL=p2wsh.js.map