import { NetworkName } from '@defichain/jellyfish-network';
import { Address } from './address';
export * from './address';
export * from './base58_address';
export * from './bech32_address';
export * from './p2pkh';
export * from './p2sh';
export * from './p2wpkh';
export * from './p2wsh';
/**
 * When insist to use the "network" decoded from raw address, instead of passing one based on running application environment
 * @param address raw human readable address (utf-8)
 * @returns DefiAddress or a child class
 *
 * @deprecated use fromAddress(address: string, network: NetworkName | string) instead
 */
declare function guess(address: string): Address;
/**
 * @param net to be validated against the decoded one from the raw address
 * @param address raw human readable address (utf-8)
 * @returns DefiAddress or a child class
 *
 * @deprecated use fromAddress(address: string, network: NetworkName | string) instead
 */
declare function from<T extends Address>(net: NetworkName, address: string): T;
/**
 * @deprecated use fromAddress(address: string, network: NetworkName | string) instead
 */
export declare const DeFiAddress: {
    /**
     * @deprecated use fromAddress(address: string, network: NetworkName | string) instead
     */
    guess: typeof guess;
    /**
     * @deprecated use fromAddress(address: string, network: NetworkName | string) instead
     */
    from: typeof from;
};
export * from './script';
//# sourceMappingURL=index.d.ts.map