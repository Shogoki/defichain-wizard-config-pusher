"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Base58Address = void 0;
const jellyfish_crypto_1 = require("@defichain/jellyfish-crypto");
const address_1 = require("./address");
class Base58Address extends address_1.Address {
    constructor(network, utf8String, hex, valid, type) {
        super(network, utf8String, valid, type);
        this.hex = hex;
    }
    validators() {
        return [
            () => (this.utf8String.length >= Base58Address.MIN_LENGTH),
            () => (this.utf8String.length <= Base58Address.MAX_LENGTH),
            () => {
                const charset = '[1-9A-HJ-NP-Za-km-z]';
                return new RegExp(`${charset}{${this.utf8String.length}}$`).test(this.utf8String);
            },
            () => {
                try {
                    const { prefix } = jellyfish_crypto_1.Bs58.toHash160(this.utf8String); // built in checksum check
                    return prefix === this.getPrefix();
                }
                catch (e) {
                    return false;
                }
            },
            () => {
                try {
                    const { buffer } = jellyfish_crypto_1.Bs58.toHash160(this.utf8String); // built in checksum check
                    return buffer.toString('hex') === this.hex;
                }
                catch (e) {
                    return false;
                }
            }
        ];
    }
    getPrefixString() {
        return Buffer.from([this.getPrefix()]).toString('hex');
    }
    static fromAddress(network, utf8String, AddressClass) {
        try {
            const { buffer } = jellyfish_crypto_1.Bs58.toHash160(utf8String);
            return new AddressClass(network, utf8String, buffer.toString('hex'));
        }
        catch (e) {
            // non b58 string, invalid address
            return new AddressClass(network, utf8String, '', false, 'Unknown');
        }
    }
}
exports.Base58Address = Base58Address;
Base58Address.MIN_LENGTH = 26;
Base58Address.MAX_LENGTH = 35;
Base58Address.DATA_HEX_LENGTH = 40; // hex char count
//# sourceMappingURL=base58_address.js.map