"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromBech32 = exports.toBech32 = void 0;
const bech32_1 = require("bech32");
/**
 * @param {Buffer} buffer to format into bech32, len 20 = p2wpkh, len 32 = p2wsh
 * @param {Network['bech32']['hrp']} hrp is the human readable part to prefix
 * @param {number} [version] witness version, OP_0
 * @return {string} bech32 encoded address
 * @see https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki
 */
function toBech32(buffer, hrp, version) {
    if (buffer.length !== 20 && buffer.length !== 32) {
        throw new TypeError('Bech32 buffer length must be either 20 or 32');
    }
    const words = bech32_1.bech32.toWords(buffer);
    words.unshift(version);
    return bech32_1.bech32.encode(hrp, words);
}
exports.toBech32 = toBech32;
function fromBech32(address) {
    const { prefix, words } = bech32_1.bech32.decode(address);
    const version = words.splice(0, 1)[0];
    const buffer = Buffer.from(bech32_1.bech32.fromWords(words));
    return {
        buffer: buffer,
        hrp: prefix,
        version: version
    };
}
exports.fromBech32 = fromBech32;
//# sourceMappingURL=Bech32.js.map