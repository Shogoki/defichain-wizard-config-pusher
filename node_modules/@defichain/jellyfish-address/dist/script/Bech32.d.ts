/// <reference types="node" />
import { Network } from '@defichain/jellyfish-network';
/**
 * Human Readable Part, prefixed to all bech32/segwit native address
 *
 * df   - DeFi MainNet
 * tf   - DeFi TestNet
 * bcrt - DeFi RegTest
 */
export declare type HRP = Network['bech32']['hrp'];
/**
 * @param {Buffer} buffer to format into bech32, len 20 = p2wpkh, len 32 = p2wsh
 * @param {Network['bech32']['hrp']} hrp is the human readable part to prefix
 * @param {number} [version] witness version, OP_0
 * @return {string} bech32 encoded address
 * @see https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki
 */
export declare function toBech32(buffer: Buffer, hrp: HRP, version: 0x00): string;
export interface DecodedBech32 {
    buffer: Buffer;
    hrp: string;
    version: number;
}
export declare function fromBech32(address: string): DecodedBech32;
//# sourceMappingURL=Bech32.d.ts.map