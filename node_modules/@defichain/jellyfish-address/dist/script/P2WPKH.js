"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromBech32P2WPKH = exports.fromScriptP2WPKH = void 0;
const jellyfish_transaction_1 = require("@defichain/jellyfish-transaction");
const jellyfish_network_1 = require("@defichain/jellyfish-network");
const Bech32_1 = require("./Bech32");
function isScriptP2WPKH(script) {
    return script.stack.length === 2 &&
        script.stack[0].type === jellyfish_transaction_1.OP_CODES.OP_0.type &&
        script.stack[1].type === 'OP_PUSHDATA' && script.stack[1].length() === 20;
}
function fromScriptP2WPKH(script, network) {
    if (!isScriptP2WPKH(script)) {
        return undefined;
    }
    const hash = script.stack[1];
    const buffer = Buffer.from(hash.hex, 'hex');
    const hrp = jellyfish_network_1.getNetwork(network).bech32.hrp;
    return Bech32_1.toBech32(buffer, hrp, 0x00);
}
exports.fromScriptP2WPKH = fromScriptP2WPKH;
function isBech32P2WPKH(decoded, network) {
    return decoded.hrp === jellyfish_network_1.getNetwork(network).bech32.hrp &&
        decoded.version === 0x00 &&
        decoded.buffer.length === 20;
}
function fromBech32P2WPKH(decoded, network) {
    if (!isBech32P2WPKH(decoded, network)) {
        return undefined;
    }
    return {
        stack: [
            jellyfish_transaction_1.OP_CODES.OP_0,
            jellyfish_transaction_1.OP_CODES.OP_PUSHDATA(Buffer.from(decoded.buffer), 'little')
        ]
    };
}
exports.fromBech32P2WPKH = fromBech32P2WPKH;
//# sourceMappingURL=P2WPKH.js.map