import { Script } from '@defichain/jellyfish-transaction';
import { NetworkName } from '@defichain/jellyfish-network';
/**
 * Known Address Types
 */
export declare enum AddressType {
    /**
     * Pay to Witness Public Key Hash
     * Native SEGWIT with Bech32
     */
    P2WPKH = "P2WPKH",
    /**
     * Pay to Witness Script Hash
     * Native SEGWIT with Bech32
     */
    P2WSH = "P2WSH",
    /**
     * Pay to Script Hash
     */
    P2SH = "P2SH",
    /**
     * Pay to Public Key Hash
     * Also known as legacy
     */
    P2PKH = "P2PKH"
}
export interface DecodedAddress {
    type: AddressType;
    address: string;
    script: Script;
    network: NetworkName;
}
/**
 * Convert an address to a script, this operation requires the network to be known.
 * A script is network agnostic while the address is prefixed with the network's unique human readable part.
 *
 * @param {string} address to convert into Script
 * @param {NetworkName} network to prefix human readable part of the address
 * @return {DecodedAddress | undefined} DecodedAddress if is a recognizable, undefined if fail to parse
 */
export declare function fromAddress(address: string, network: NetworkName): DecodedAddress | undefined;
/**
 * Convert a script to address, this operation requires the network to be known.
 * A script is network agnostic while the address is prefixed with the network's unique human readable part.
 *
 * @param {Script} script to convert into address
 * @param {NetworkName} network to prefix human readable part of the address
 * @return {DecodedAddress | undefined} DecodedAddress if is a recognizable, undefined if fail to parse
 */
export declare function fromScript(script: Script, network: NetworkName): DecodedAddress | undefined;
/**
 * Convert a script to address, this operation requires the network to be known.
 * A script is network agnostic while the address is prefixed with the network's unique human readable part.
 *
 * @param {string} hex of the script to convert into address, without VarUInt length
 * @param {NetworkName} network to prefix human readable part of the address
 * @return {DecodedAddress | undefined} DecodedAddress if is a recognizable, undefined if fail to parse
 */
export declare function fromScriptHex(hex: string, network: NetworkName): DecodedAddress | undefined;
//# sourceMappingURL=index.d.ts.map