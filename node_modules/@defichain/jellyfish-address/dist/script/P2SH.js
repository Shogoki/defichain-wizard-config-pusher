"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromBase58CheckP2SH = exports.fromScriptP2SH = void 0;
const jellyfish_transaction_1 = require("@defichain/jellyfish-transaction");
const jellyfish_network_1 = require("@defichain/jellyfish-network");
const Base58Check_1 = require("./Base58Check");
function isScriptP2SH(script) {
    return script.stack.length === 3 &&
        script.stack[0].type === jellyfish_transaction_1.OP_CODES.OP_HASH160.type &&
        script.stack[1].type === 'OP_PUSHDATA' && script.stack[1].length() === 20 &&
        script.stack[2].type === jellyfish_transaction_1.OP_CODES.OP_EQUAL.type;
}
function fromScriptP2SH(script, network) {
    if (!isScriptP2SH(script)) {
        return undefined;
    }
    const hash = script.stack[1];
    const buffer = Buffer.from(hash.hex, 'hex');
    const prefix = jellyfish_network_1.getNetwork(network).scriptHashPrefix;
    return Base58Check_1.toBase58Check(buffer, prefix);
}
exports.fromScriptP2SH = fromScriptP2SH;
function isBase58CheckP2SH(decoded, network) {
    return decoded.prefix === jellyfish_network_1.getNetwork(network).scriptHashPrefix &&
        decoded.buffer.length === 20;
}
function fromBase58CheckP2SH(decoded, network) {
    if (!isBase58CheckP2SH(decoded, network)) {
        return undefined;
    }
    return {
        stack: [
            jellyfish_transaction_1.OP_CODES.OP_HASH160,
            jellyfish_transaction_1.OP_CODES.OP_PUSHDATA(Buffer.from(decoded.buffer), 'little'),
            jellyfish_transaction_1.OP_CODES.OP_EQUAL
        ]
    };
}
exports.fromBase58CheckP2SH = fromBase58CheckP2SH;
//# sourceMappingURL=P2SH.js.map