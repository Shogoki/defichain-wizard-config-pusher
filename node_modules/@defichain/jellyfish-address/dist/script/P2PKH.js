"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromBase58CheckP2PKH = exports.fromScriptP2PKH = void 0;
const jellyfish_transaction_1 = require("@defichain/jellyfish-transaction");
const jellyfish_network_1 = require("@defichain/jellyfish-network");
const Base58Check_1 = require("./Base58Check");
function isScriptP2PKH(script) {
    return script.stack.length === 5 &&
        script.stack[0].type === jellyfish_transaction_1.OP_CODES.OP_DUP.type &&
        script.stack[1].type === jellyfish_transaction_1.OP_CODES.OP_HASH160.type &&
        script.stack[2].type === 'OP_PUSHDATA' && script.stack[2].length() === 20 &&
        script.stack[3].type === jellyfish_transaction_1.OP_CODES.OP_EQUALVERIFY.type &&
        script.stack[4].type === jellyfish_transaction_1.OP_CODES.OP_CHECKSIG.type;
}
function fromScriptP2PKH(script, network) {
    if (!isScriptP2PKH(script)) {
        return undefined;
    }
    const hash = script.stack[2];
    const buffer = Buffer.from(hash.hex, 'hex');
    const prefix = jellyfish_network_1.getNetwork(network).pubKeyHashPrefix;
    return Base58Check_1.toBase58Check(buffer, prefix);
}
exports.fromScriptP2PKH = fromScriptP2PKH;
function isBase58CheckP2PKH(decoded, network) {
    return decoded.prefix === jellyfish_network_1.getNetwork(network).pubKeyHashPrefix &&
        decoded.buffer.length === 20;
}
function fromBase58CheckP2PKH(decoded, network) {
    if (!isBase58CheckP2PKH(decoded, network)) {
        return undefined;
    }
    return {
        stack: [
            jellyfish_transaction_1.OP_CODES.OP_DUP,
            jellyfish_transaction_1.OP_CODES.OP_HASH160,
            jellyfish_transaction_1.OP_CODES.OP_PUSHDATA(Buffer.from(decoded.buffer), 'little'),
            jellyfish_transaction_1.OP_CODES.OP_EQUALVERIFY,
            jellyfish_transaction_1.OP_CODES.OP_CHECKSIG
        ]
    };
}
exports.fromBase58CheckP2PKH = fromBase58CheckP2PKH;
//# sourceMappingURL=P2PKH.js.map