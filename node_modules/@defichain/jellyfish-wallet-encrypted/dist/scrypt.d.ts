/// <reference types="node" />
/**
 * The scrypt password-base key derivation function (pbkdf) is an algorithm designed to be brute-force resistant that
 * converts human readable passwords into fixed length arrays of bytes, which can then be used as a key for symmetric
 * block ciphers, private keys, et cetera.
 *
 * This implementation is an adapter for https://github.com/ricmoo/scrypt-js implementation.
 */
export declare class Scrypt {
    private readonly N;
    private readonly r;
    private readonly p;
    /**
     * @param {number} N the CPU/memory cost; increasing this increases the overall difficulty
     * @param {number} r the block size; increasing this increases the dependency on memory latency and bandwidth
     * @param {number} p the parallelization cost; increasing this increases the dependency on multi-processing
     */
    constructor(N?: number, r?: number, p?: number);
    /**
     * Derive a specific length buffer via Scrypt implementation
     * Recommended (by bip38) to serve as an private key encryption key
     *
     * @param {string} passphrase utf8 string
     * @param {Buffer} salt
     * @param {number} keyLength desired output buffer length
     * @returns {Buffer}
     */
    derive(passphrase: string, salt: Buffer, keyLength: number): Promise<Buffer>;
}
//# sourceMappingURL=scrypt.d.ts.map