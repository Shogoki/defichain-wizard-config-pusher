"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scrypt = void 0;
const scrypt_js_1 = __importDefault(require("scrypt-js"));
/**
 * The scrypt password-base key derivation function (pbkdf) is an algorithm designed to be brute-force resistant that
 * converts human readable passwords into fixed length arrays of bytes, which can then be used as a key for symmetric
 * block ciphers, private keys, et cetera.
 *
 * This implementation is an adapter for https://github.com/ricmoo/scrypt-js implementation.
 */
class Scrypt {
    /**
     * @param {number} N the CPU/memory cost; increasing this increases the overall difficulty
     * @param {number} r the block size; increasing this increases the dependency on memory latency and bandwidth
     * @param {number} p the parallelization cost; increasing this increases the dependency on multi-processing
     */
    constructor(N = 16384, r = 8, p = 1) {
        this.N = N;
        this.r = r;
        this.p = p;
    }
    /**
     * Derive a specific length buffer via Scrypt implementation
     * Recommended (by bip38) to serve as an private key encryption key
     *
     * @param {string} passphrase utf8 string
     * @param {Buffer} salt
     * @param {number} keyLength desired output buffer length
     * @returns {Buffer}
     */
    derive(passphrase, salt, keyLength) {
        return __awaiter(this, void 0, void 0, function* () {
            const secret = Buffer.from(passphrase.normalize('NFKC'), 'utf8');
            const array = yield scrypt_js_1.default.scrypt(secret, salt, this.N, this.r, this.p, keyLength);
            return Buffer.from(array);
        });
    }
}
exports.Scrypt = Scrypt;
//# sourceMappingURL=scrypt.js.map