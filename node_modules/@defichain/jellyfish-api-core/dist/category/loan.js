"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Loan = void 0;
/**
 * @deprecated exports would be deprecated soon
 */
__exportStar(require("./vault"), exports);
/**
 * Loan RPCs for DeFi Blockchain
 */
class Loan {
    constructor(client) {
        this.client = client;
    }
    /**
     * Creates a loan scheme transaction.
     *
     * @param {CreateLoanScheme} scheme
     * @param {number} scheme.minColRatio Minimum collateralization ratio
     * @param {BigNumber} scheme.interestRate Interest rate
     * @param {string} scheme.id Unique identifier of the loan scheme, max 8 chars
     * @param {UTXO[]} [utxos = []] Specific UTXOs to spend
     * @param {string} utxos.txid Transaction Id
     * @param {number} utxos.vout Output number
     * @return {Promise<string>} LoanSchemeId, also the txn id for txn created to create loan scheme
     */
    createLoanScheme(scheme, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('createloanscheme', [scheme.minColRatio, scheme.interestRate, scheme.id, utxos], 'number');
        });
    }
    /**
     * Updates an existing loan scheme.
     *
     * @param {UpdateLoanScheme} scheme
     * @param {number} scheme.minColRatio Minimum collateralization ratio
     * @param {BigNumber} scheme.interestRate Interest rate
     * @param {string} scheme.id Unique identifier of the loan scheme, max 8 chars
     * @param {number} [scheme.activateAfterBlock] Block height at which new changes take effect
     * @param {UTXO[]} [utxos = []] Specific UTXOs to spend
     * @param {string} utxos.txid Transaction Id
     * @param {number} utxos.vout Output number
     * @return {Promise<string>} Hex string of the transaction
     */
    updateLoanScheme(scheme, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('updateloanscheme', [scheme.minColRatio, scheme.interestRate, scheme.id, scheme.activateAfterBlock, utxos], 'number');
        });
    }
    /**
     * Destroys a loan scheme.
     *
     * @param {DestroyLoanScheme} scheme
     * @param {string} scheme.id Unique identifier of the loan scheme, max 8 chars
     * @param {number} [scheme.activateAfterBlock] Block height at which new changes take effect
     * @param {UTXO[]} [utxos = []] Specific UTXOs to spend
     * @param {string} utxos.txid Transaction Id
     * @param {number} utxos.vout Output number
     * @return {Promise<string>} Hex string of the transaction
     */
    destroyLoanScheme(scheme, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('destroyloanscheme', [scheme.id, scheme.activateAfterBlock, utxos], 'number');
        });
    }
    /**
     * List all available loan schemes.
     *
     * @return {Promise<LoanSchemeResult[]>}
     */
    listLoanSchemes() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('listloanschemes', [], 'bignumber');
        });
    }
    /**
     * Get loan scheme.
     *
     * @param {string} id Unique identifier of the loan scheme, max 8 chars.
     * @return {Promise<GetLoanSchemeResult>}
     */
    getLoanScheme(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('getloanscheme', [id], 'bignumber');
        });
    }
    /**
     * Sets the default loan scheme.
     *
     * @param {string} id Unique identifier of the loan scheme, max 8 chars
     * @param {UTXO[]} [utxos = []] Specific UTXOs to spend
     * @param {string} utxos.txid Transaction Id
     * @param {number} utxos.vout Output number
     * @return {Promise<string>} Hex string of the transaction
     */
    setDefaultLoanScheme(id, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('setdefaultloanscheme', [id, utxos], 'number');
        });
    }
    /**
     * Set a collateral token transaction.
     *
     * @param {SetCollateralToken} collateralToken
     * @param {string} collateralToken.token Symbol or id of collateral token
     * @param {BigNumber} collateralToken.factor Collateralization factor
     * @param {string} collateralToken.fixedIntervalPriceId token/currency pair to use for price of token
     * @param {number} [collateralToken.activateAfterBlock] changes will be active after the block height
     * @param {UTXO[]} [utxos = []] Specific UTXOs to spend
     * @param {string} utxos.txid Transaction Id
     * @param {number} utxos.vout Output number
     * @return {Promise<string>} collateralTokenId, also the txn id for txn created to set collateral token
     */
    setCollateralToken(collateralToken, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('setcollateraltoken', [collateralToken, utxos], 'number');
        });
    }
    /**
     * List collateral tokens.
     *
     * @return {Promise<CollateralTokenDetail[]>} Get all collateral tokens
     */
    listCollateralTokens() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('listcollateraltokens', [], 'bignumber');
        });
    }
    /**
     * Get collateral token.
     *
     * @param {string} token symbol or id
     * @return {Promise<CollateralTokenDetail>} Collateral token result
     */
    getCollateralToken(token) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('getcollateraltoken', [token], 'bignumber');
        });
    }
    /**
     * Creates (and submits to local node and network) a token for a price feed set in collateral token.
     *
     * @param {SetLoanToken} loanToken
     * @param {string} loanToken.symbol Token's symbol (unique), no longer than 8
     * @param {string} [loanToken.name] Token's name, no longer than 128
     * @param {string} loanToken.fixedIntervalPriceId token/currency pair to use for price of token
     * @param {boolean} [loanToken.mintable = true] Token's 'Mintable' property
     * @param {BigNumber} [loanToken.interest = 0] Interest rate
     * @param {UTXO[]} [utxos = []] Specific UTXOs to spend
     * @param {string} utxos.txid Transaction Id
     * @param {number} utxos.vout Output number
     * @return {Promise<string>} LoanTokenId, also the txn id for txn created to set loan token
     */
    setLoanToken(loanToken, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = Object.assign({ mintable: true, interest: 0 }, loanToken);
            return yield this.client.call('setloantoken', [payload, utxos], 'number');
        });
    }
    /**
     * Quick access to multiple API with consolidated total collateral and loan value.
     * @see {@link listCollateralTokens}
     * @see {@link listLoanTokens}
     * @see {@link listLoanSchemes}
     *
     * @returns {Promise<GetLoanInfoResult>}
     */
    getLoanInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('getloaninfo', [], 'bignumber');
        });
    }
    /**
     * Updates an existing loan token.
     *
     * @param {string} oldToken Previous tokens's symbol, id or creation tx (unique)
     * @param {UpdateLoanToken} newTokenDetails
     * @param {string} [newTokenDetails.symbol] New token's symbol (unique), no longer than 8
     * @param {string} [newTokenDetails.name] Token's name, no longer than 128
     * @param {string} [newTokenDetails.fixedIntervalPriceId] token/currency pair to use for price of token
     * @param {boolean} [newTokenDetails.mintable] Token's 'Mintable' property
     * @param {BigNumber} [newTokenDetails.interest] Interest rate
     * @param {UTXO[]} [utxos = []] Specific UTXOs to spend
     * @param {string} utxos.txid Transaction Id
     * @param {number} utxos.vout Output number
     * @return {Promise<string>} LoanTokenId, also the txn id for txn created to update loan token
     */
    updateLoanToken(oldToken, newTokenDetails, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('updateloantoken', [oldToken, newTokenDetails, utxos], 'number');
        });
    }
    /**
     * Get interest info
     *
     * @param {string} id Loan scheme id
     * @param {string} [token] Specified by loan token id, loan token name and loan toekn creation tx
     * @return {Promise<Interest[]>}
     */
    getInterest(id, token) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('getinterest', [id, token], 'bignumber');
        });
    }
    /**
     * Get loan token.
     *
     * @param {string} token Symbol or id of loan token
     * @return {Promise<LoanTokenResult>} Loan token details
     */
    getLoanToken(token) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('getloantoken', [token], 'bignumber');
        });
    }
    /**
     * List all created loan tokens.
     *
     * @return {Promise<LoanTokenResult[]>}
     */
    listLoanTokens() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('listloantokens', [], 'bignumber');
        });
    }
    /**
     * Take loan
     *
     * @param {TakeLoanMetadata} metadata
     * @param {string} metadata.vaultId Vault id
     * @param {string | string[]} metadata.amounts In "amount@symbol" format
     * @param {string} [metadata.to] Address to receive tokens
     * @param {UTXO[]} [utxos = []] Specific UTXOs to spend
     * @param {string} utxos.txid Transaction Id
     * @param {number} utxos.vout Output number
     * @return {Promise<string>}
     */
    takeLoan(metadata, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('takeloan', [metadata, utxos], 'number');
        });
    }
    /**
     * Return loan in a desired amount.
     *
     * @param {PaybackLoanMetadata | PaybackLoanMetadataV2} metadata
     * @param {string} metadata.vaultId Vault id
     * @param {string| string[]} metadata.amounts In "amount@symbol" format
     * @param {string} metadata.from Address from transfer tokens
     * @param {TokenPaybackAmount[]} metadata.loans
     * @param {string | string[]} metadata.loans[0].amounts In "amount@symbol" format to be spent
     * @param {string} metadata.loans[0].dToken Token to be paid
     * @param {UTXO[]} [utxos = []] Specific UTXOs to spend
     * @param {string} utxos.txid Transaction Id
     * @param {number} utxos.vout Output number
     * @return {Promise<string>} txid
     */
    paybackLoan(metadata, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('paybackloan', [metadata, utxos], 'number');
        });
    }
    // --- Deprecated vault methods---
    /**
     * Creates a vault transaction.
     *
     * @deprecated Vault methods are moving to dedicated vault category
     * @param {CreateVault} vault
     * @param {string} vault.ownerAddress Any valid address or "" to generate a new address
     * @param {number} [vault.loanSchemeId] Unique identifier of the loan scheme (8 chars max). If empty, the default loan scheme will be selected
     * @param {UTXO[]} [utxos = []] Specific UTXOs to spend
     * @param {string} utxos.txid Transaction Id
     * @param {number} utxos.vout Output number
     * @return {Promise<string>} Transaction id of the transaction
     */
    createVault(vault, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('createvault', [vault.ownerAddress, vault.loanSchemeId, utxos], 'number');
        });
    }
    /**
     * Create update vault transaction.
     *
     * @deprecated Vault methods are moving to dedicated vault category
     * @param {string} vaultId
     * @param {UpdateVault} vault
     * @param {string} [vault.ownerAddress] Any valid address
     * @param {string} [vault.loanSchemeId] Unique identifier of the loan scheme (8 chars max)
     * @param {UTXO[]} [utxos = []] Specific UTXOs to spend
     * @param {string} utxos.txid Transaction Id
     * @param {number} utxos.vout Output number
     * @return {Promise<string>} Transaction id of the transaction
     */
    updateVault(vaultId, vault, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('updatevault', [vaultId, vault, utxos], 'number');
        });
    }
    /**
     * Returns information about vault.
     *
     * @deprecated Vault methods are moving to dedicated vault category
     * @param {string} vaultId vault hex id
     * @param {boolean} [verbose] request verbose info
     * @return {Promise<VaultActive | VaultLiquidation>}
     */
    getVault(vaultId, verbose = false) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('getvault', [vaultId, verbose], {
                collateralAmounts: 'bignumber',
                loanAmounts: 'bignumber',
                interestAmounts: 'bignumber',
                collateralValue: 'bignumber',
                loanValue: 'bignumber',
                interestValue: 'bignumber',
                informativeRatio: 'bignumber',
                nextCollateralRatio: 'bignumber',
                interestPerBlockValue: 'bignumber',
                interestsPerBlock: 'bignumber'
            });
        });
    }
    /**
     * List all available vaults.
     *
     * @deprecated Vault methods are moving to dedicated vault category
     * @param {VaultPagination} [pagination]
     * @param {string} [pagination.start]
     * @param {boolean} [pagination.including_start]
     * @param {number} [pagination.limit=100]
     * @param {ListVaultOptions} [options]
     * @param {string} [options.ownerAddress] Address of the vault owner
     * @param {string} [options.loanSchemeId] Vault's loan scheme id
     * @param {VaultState} [options.state = VaultState.UNKNOWN] vault's state
     * @param {boolean} [options.verbose = false] true to return same information as getVault
     * @return {Promise<Vault | VaultActive | VaultLiquidation[]>} Array of objects including details of the vaults.
     * @deprecated
     */
    listVaults(pagination = {}, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('listvaults', [options, pagination], {
                collateralValue: 'bignumber',
                loanValue: 'bignumber',
                interestValue: 'bignumber',
                informativeRatio: 'bignumber'
            });
        });
    }
    /**
     * Close vault
     *
     * @deprecated Vault methods are moving to dedicated vault category
     * @param {CloseVault} closeVault
     * @param {string} closeVault.vaultId Vault id
     * @param {string} closeVault.to Valid address to receive collateral tokens
     * @param {UTXO[]} [utxos = []] Specific UTXOs to spend
     * @param {string} utxos.txid Transaction Id
     * @param {number} utxos.vout Output number
     * @return {Promise<string>}
     */
    closeVault(closeVault, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('closevault', [closeVault.vaultId, closeVault.to, utxos], 'number');
        });
    }
    /**
     * Deposit to vault
     *
     * @deprecated Vault methods are moving to dedicated vault category
     * @param {DepositVault} depositVault
     * @param {string} depositVault.vaultId Vault id
     * @param {string} depositVault.from Collateral address
     * @param {string} depositVault.amount In "amount@symbol" format
     * @param {UTXO[]} [utxos = []] Specific UTXOs to spend
     * @param {string} utxos.txid Transaction Id
     * @param {number} utxos.vout Output number
     * @return {Promise<string>}
     */
    depositToVault(depositVault, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('deposittovault', [depositVault.vaultId, depositVault.from, depositVault.amount, utxos], 'number');
        });
    }
    /**
     * Withdraw from vault
     *
     * @deprecated Vault methods are moving to dedicated vault category
     * @param {WithdrawVault} withdrawVault
     * @param {string} withdrawVault.vaultId Vault id
     * @param {string} withdrawVault.to Collateral address
     * @param {string} withdrawVault.amount In "amount@symbol" format
     * @param {UTXO[]} [utxos = []] Specific UTXOs to spend
     * @param {string} utxos.txid Transaction Id
     * @param {number} utxos.vout Output number
     * @return {Promise<string>}
     */
    withdrawFromVault(withdrawVault, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('withdrawfromvault', [withdrawVault.vaultId, withdrawVault.to, withdrawVault.amount, utxos], 'number');
        });
    }
    /**
     * Bid to vault in auction
     *
     * @deprecated Vault methods are moving to dedicated vault category
     * @param {PlaceAuctionBid} placeAuctionBid
     * @param {string} placeAuctionBid.vaultId Vault Id
     * @param {index} placeAuctionBid.index Auction index
     * @param {from} placeAuctionBid.from Address to get token
     * @param {amount} placeAuctionBid.amount in "amount@symbol" format
     * @param {UTXO[]} [utxos = []] Specific UTXOs to spend
     * @param {string} utxos.txid Transaction Id
     * @param {number} utxos.vout Output number
     * @return {Promise<string>} The transaction id
     */
    placeAuctionBid(placeAuctionBid, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('placeauctionbid', [placeAuctionBid.vaultId, placeAuctionBid.index, placeAuctionBid.from, placeAuctionBid.amount, utxos], 'number');
        });
    }
    /**
     * List all available auctions.
     *
     * @deprecated Vault methods are moving to dedicated vault category
     * @param {AuctionPagination} pagination
     * @param {AuctionPaginationStart} [pagination.start]
     * @param {string} [pagination.start.vaultId]
     * @param {number} [pagination.start.height]
     * @param {boolean} [pagination.including_start]
     * @param {number} [pagination.limit=100]
     * @return {Promise<VaultLiquidation[]>}
     */
    listAuctions(pagination = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const defaultPagination = {
                limit: 100
            };
            return yield this.client.call('listauctions', [Object.assign(Object.assign({}, defaultPagination), pagination)], 'number');
        });
    }
    /**
     * Returns information about auction history.
     *
     * @deprecated Vault methods are moving to dedicated vault category
     * @param {string} [owner] address or reserved word : mine / all (Default to mine)
     * @param {ListAuctionHistoryPagination} pagination
     * @param {number} [pagination.maxBlockHeight] Maximum block height
     * @param {string} [pagination.vaultId] Vault Id
     * @param {number} [pagination.index] Auction index
     * @param {number} [pagination.limit = 100]
     * @return {Promise<ListAuctionHistoryDetail>}
     */
    listAuctionHistory(owner = 'mine', pagination) {
        return __awaiter(this, void 0, void 0, function* () {
            const defaultPagination = {
                limit: 100
            };
            return yield this.client.call('listauctionhistory', [owner, Object.assign(Object.assign({}, defaultPagination), pagination)], 'number');
        });
    }
}
exports.Loan = Loan;
//# sourceMappingURL=loan.js.map