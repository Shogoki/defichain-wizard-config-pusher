"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletAccount = void 0;
const jellyfish_transaction_1 = require("@defichain/jellyfish-transaction");
const jellyfish_crypto_1 = require("@defichain/jellyfish-crypto");
const jellyfish_address_1 = require("@defichain/jellyfish-address");
/**
 * An HDW is organized as several 'accounts'.
 * Accounts are numbered, the default account ("") being number 0.
 * Account are derived from root and the pubkey to be used is `${account}/0/0`
 *
 * WalletAccount implementation uses NATIVE SEGWIT redeem script exclusively.
 */
class WalletAccount {
    constructor(walletEllipticPair, network) {
        this.walletEllipticPair = walletEllipticPair;
        this.network = network;
    }
    /**
     * @return {Promise<string>} Bech32 address of this account. (NATIVE SEGWIT)
     */
    getAddress() {
        return __awaiter(this, void 0, void 0, function* () {
            const pubKey = yield this.walletEllipticPair.publicKey();
            return jellyfish_crypto_1.Bech32.fromPubKey(pubKey, this.network.bech32.hrp, 0x00);
        });
    }
    /**
     * @return {Promise<Script>} redeem script of this account. (NATIVE SEGWIT)
     */
    getScript() {
        return __awaiter(this, void 0, void 0, function* () {
            const pubKey = yield this.walletEllipticPair.publicKey();
            return {
                stack: [
                    jellyfish_transaction_1.OP_CODES.OP_0,
                    jellyfish_transaction_1.OP_CODES.OP_PUSHDATA(jellyfish_crypto_1.HASH160(pubKey), 'little')
                ]
            };
        });
    }
    /**
     * Convert address to script, this validate that you are sending to the same network.
     * It uses jellyfish-address under the hood.
     *
     * @param {string} address to parse into script
     * @return {Script} parsed from address
     * @throws {Error} if address or network is invalid
     */
    addressToScript(address) {
        const decodedAddress = jellyfish_address_1.fromAddress(address, this.network.name);
        if ((decodedAddress === null || decodedAddress === void 0 ? void 0 : decodedAddress.script) === undefined) {
            throw new Error('address is invalid');
        }
        return decodedAddress.script;
    }
    publicKey() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.walletEllipticPair.publicKey();
        });
    }
    privateKey() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.walletEllipticPair.privateKey();
        });
    }
    sign(hash) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.walletEllipticPair.sign(hash);
        });
    }
    signTx(transaction, prevouts) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.walletEllipticPair.signTx(transaction, prevouts);
        });
    }
    verify(hash, derSignature) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.walletEllipticPair.verify(hash, derSignature);
        });
    }
}
exports.WalletAccount = WalletAccount;
//# sourceMappingURL=wallet_account.js.map