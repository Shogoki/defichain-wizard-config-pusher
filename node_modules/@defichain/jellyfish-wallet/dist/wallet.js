"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JellyfishWallet = void 0;
/**
 * Jellyfish managed wallet.
 * WalletHdNode instance is provided by WalletHdNodeProvider.
 * WalletAccount instance for interfacing layer/upstream to service will be provided by WalletAccountProvider.
 *
 * JellyfishWallet doesn't follow BIP-44.
 */
class JellyfishWallet {
    /**
     * @param {WalletHdNodeProvider} nodeProvider
     * @param {WalletAccountProvider} accountProvider
     * @param {number} [coinType=1129] COIN_TYPE_DFI
     * @param {number} [purpose=0] PURPOSE_LIGHT_WALLET
     */
    constructor(nodeProvider, accountProvider, coinType = JellyfishWallet.COIN_TYPE_DFI, purpose = JellyfishWallet.PURPOSE_LIGHT_WALLET) {
        this.nodeProvider = nodeProvider;
        this.accountProvider = accountProvider;
        this.coinType = coinType;
        this.purpose = purpose;
    }
    /**
     * @param {number} account number to get
     * @return {WalletAccount}
     */
    get(account) {
        const node = this.deriveNode(account);
        return this.accountProvider.provide(node);
    }
    /**
     * @param {number} account number to get
     * @return {WalletHdNode}
     */
    deriveNode(account) {
        const path = this.derivePath(account);
        return this.nodeProvider.derive(path);
    }
    /**
     * @param {number} account number to get
     * @return {string} HD path
     */
    derivePath(account) {
        return `${this.coinType}/${this.purpose}/0/${account}`;
    }
    /**
     * Check if account in the wallet is usable.
     * An usable account in wallet is a account that has no activity gap.
     * Account 0 (default) is always valid.
     *
     * @example 0 is the default account and usable regardless
     * @example 0,1 is usable when [0] has activity
     * @example 0,1,2 is usable when [0,1] has activity
     * @example 0,1,2,3 is usable when [0,1,2] has activity
     * @example 0,1 is usable when [0,1,3] has activity (3 should never ever has transaction in the first place)
     *
     * @param {number} account number to check if valid
     * @return Promise<boolean> usability of account
     */
    isUsable(account) {
        return __awaiter(this, void 0, void 0, function* () {
            if (account === 0) {
                return true;
            }
            return yield this.get(account - 1).isActive();
        });
    }
    /**
     * Discover accounts that are active in managed JellyfishWallet.
     * Account are considered active if the address contains any transaction activity.
     * Default account, the first account will always get discovered regardless.
     *
     * @param {number} maxAccounts to discover
     * @return WalletAccount[] discovered
     */
    discover(maxAccounts = 100) {
        return __awaiter(this, void 0, void 0, function* () {
            const wallets = [];
            for (let i = 0; i < maxAccounts; i++) {
                const account = yield this.get(i);
                if (!(yield account.isActive())) {
                    break;
                }
                wallets[i] = account;
            }
            return wallets;
        });
    }
}
exports.JellyfishWallet = JellyfishWallet;
JellyfishWallet.COIN_TYPE_BTC = 0;
JellyfishWallet.COIN_TYPE_DFI = 1129;
/**
 * Default purpose, for Light Wallet Implementation
 */
JellyfishWallet.PURPOSE_LIGHT_WALLET = 0;
/**
 * For Masternode creation UTXO locking
 */
JellyfishWallet.PURPOSE_LIGHT_MASTERNODE = 1;
/**
 * For light price oracle implementation
 */
JellyfishWallet.PURPOSE_LIGHT_PRICE_ORACLE = 2;
//# sourceMappingURL=wallet.js.map