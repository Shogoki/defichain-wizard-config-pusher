/// <reference types="node" />
import { Script, Transaction, TransactionSegWit, Vout } from '@defichain/jellyfish-transaction';
import { WalletEllipticPair } from './wallet_elliptic_pair';
import { Network } from '@defichain/jellyfish-network';
/**
 * An HDW is organized as several 'accounts'.
 * Accounts are numbered, the default account ("") being number 0.
 * Account are derived from root and the pubkey to be used is `${account}/0/0`
 *
 * WalletAccount implementation uses NATIVE SEGWIT redeem script exclusively.
 */
export declare abstract class WalletAccount implements WalletEllipticPair {
    private readonly walletEllipticPair;
    readonly network: Network;
    protected constructor(walletEllipticPair: WalletEllipticPair, network: Network);
    /**
     * @return {Promise<string>} Bech32 address of this account. (NATIVE SEGWIT)
     */
    getAddress(): Promise<string>;
    /**
     * @return {Promise<Script>} redeem script of this account. (NATIVE SEGWIT)
     */
    getScript(): Promise<Script>;
    /**
     * Convert address to script, this validate that you are sending to the same network.
     * It uses jellyfish-address under the hood.
     *
     * @param {string} address to parse into script
     * @return {Script} parsed from address
     * @throws {Error} if address or network is invalid
     */
    addressToScript(address: string): Script;
    /**
     * A WalletAccount is active when it has txn activity
     * @return Promise<boolean>
     */
    abstract isActive(): Promise<boolean>;
    publicKey(): Promise<Buffer>;
    privateKey(): Promise<Buffer>;
    sign(hash: Buffer): Promise<Buffer>;
    signTx(transaction: Transaction, prevouts: Vout[]): Promise<TransactionSegWit>;
    verify(hash: Buffer, derSignature: Buffer): Promise<boolean>;
}
/**
 * WalletAccount uses a provider model to allow jellyfish-wallet provide an account interface from any upstream
 * provider. This keep WalletAccount implementation free from a single implementation constraint.
 */
export interface WalletAccountProvider<T extends WalletAccount> {
    /**
     * @param {WalletEllipticPair} hdNode of this wallet account
     * @return WalletAccount
     */
    provide: (hdNode: WalletEllipticPair) => T;
}
//# sourceMappingURL=wallet_account.d.ts.map