/// <reference types="node" />
import { WalletEllipticPair } from '@defichain/jellyfish-wallet';
import { EllipticPair } from '@defichain/jellyfish-crypto';
import { Transaction, TransactionSegWit, Vout } from '@defichain/jellyfish-transaction';
/**
 * WalletClassic extends WalletEllipticPair with a simple classic implementation.
 *
 * Single elliptic pair wallet.
 */
export declare class WalletClassic implements WalletEllipticPair {
    readonly ellipticPair: EllipticPair;
    constructor(ellipticPair: EllipticPair);
    /**
     * @return {Promise<Buffer>} compressed public key
     */
    publicKey(): Promise<Buffer>;
    /**
     * @return {Promise<Buffer>} privateKey
     */
    privateKey(): Promise<Buffer>;
    /**
     * @param {Buffer} hash to sign
     * @return {Buffer} signature in DER format, SIGHASHTYPE not included
     * @see https://tools.ietf.org/html/rfc6979
     * @see https://github.com/bitcoin/bitcoin/pull/13666
     */
    sign(hash: Buffer): Promise<Buffer>;
    /**
     * @param {Buffer} hash to verify with signature
     * @param {Buffer} derSignature of the hash in encoded with DER, SIGHASHTYPE must not be included
     * @return {boolean} validity of signature of the hash
     */
    verify(hash: Buffer, derSignature: Buffer): Promise<boolean>;
    /**
     * WalletClassic transaction signing.
     *
     * @param {Transaction} transaction to sign
     * @param {Vout[]} prevouts of the transaction to fund this transaction
     * @return {TransactionSegWit} a signed transaction
     */
    signTx(transaction: Transaction, prevouts: Vout[]): Promise<TransactionSegWit>;
}
//# sourceMappingURL=classic.d.ts.map