"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBlockRewardDistribution = exports.BlockRewardDistributionPercentage = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
exports.BlockRewardDistributionPercentage = {
    masternode: 3333,
    community: 491,
    anchor: 2,
    liquidity: 2545,
    loan: 2468,
    options: 988,
    unallocated: 173
};
/**
 * Get block reward distribution with block base subsidy
 *
 * @param {BigNumber} subsidy
 * @return BlockRewardDistribution
 */
function getBlockRewardDistribution(subsidy) {
    return {
        masternode: calculateReward(subsidy, exports.BlockRewardDistributionPercentage.masternode),
        community: calculateReward(subsidy, exports.BlockRewardDistributionPercentage.community),
        anchor: calculateReward(subsidy, exports.BlockRewardDistributionPercentage.anchor),
        liquidity: calculateReward(subsidy, exports.BlockRewardDistributionPercentage.liquidity),
        loan: calculateReward(subsidy, exports.BlockRewardDistributionPercentage.loan),
        options: calculateReward(subsidy, exports.BlockRewardDistributionPercentage.options),
        unallocated: calculateReward(subsidy, exports.BlockRewardDistributionPercentage.unallocated)
    };
}
exports.getBlockRewardDistribution = getBlockRewardDistribution;
/**
 * Amount * Percent / 10000 using Integer Arithmetic (matching cpp CAmount)
 *
 * @param {BigNumber} amount
 * @param {number} percent presented in integer as a numerator with denominator of 10000
 * @return number
 */
function calculateReward(amount, percent) {
    return amount.times(percent).div(10000).integerValue(bignumber_js_1.default.ROUND_DOWN).toNumber();
}
//# sourceMappingURL=BlockRewardDistribution.js.map