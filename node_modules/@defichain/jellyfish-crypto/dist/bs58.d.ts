/// <reference types="node" />
export interface DecodedB58 {
    buffer: Buffer;
    prefix: number;
}
/**
 * Decode a base58 address into 20 bytes data, for p2pkh and p2sh use
 * @param {string} base58 33 to 35 characters string (utf8)
 * @returns {DecodedB58} 20 bytes data + 1 byte prefix
 */
declare function toHash160(base58: string): DecodedB58;
/**
 * To create Base58 address using 20 bytes data + prefix, for p2pkh and p2sh use
 * @param {Buffer|string} data 20 bytes Buffer or 40 characters string
 * @param {number} prefix max = 255 = 1 byte
 * @returns Base58 address (in utf8)
 */
declare function fromHash160(data: string | Buffer, prefix: number): string;
/**
 * To create Base58 address using a raw 33 bytes (compressed) public key, for p2pkh and p2sh use
 * @param {Buffer} pubKey 33 bytes long public key
 * @param {number} prefix max = 255 = 1 byte
 * @returns {string} base58 encoded string
 */
declare function fromPubKey(pubKey: Buffer, prefix: number): string;
export declare const Bs58: {
    toHash160: typeof toHash160;
    fromPubKey: typeof fromPubKey;
    fromHash160: typeof fromHash160;
};
export {};
//# sourceMappingURL=bs58.d.ts.map