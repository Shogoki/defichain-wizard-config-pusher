/// <reference types="node" />
/**
 * Encrypt a clear-text message using AES-256 plus a random Initialization Vector.
 * @see https://github.com/JamesMGreene/node-aes256
 *
 * @param {Buffer} key  A passphrase of any length to used to generate a symmetric session key.
 * @param {Buffer} data  The clear-text message or buffer to be encrypted.
 * @param {(number) => Buffer} [rng = randomBytes] cryptographically strong random values generator required for IV
 * @returns {Buffer}
 */
declare function encrypt(key: Buffer, data: Buffer, rng?: (numOfBytes: number) => Buffer): Buffer;
/**
 * Decrypt an encrypted message back to clear-text using AES-256 plus a random Initialization Vector.
 * @see https://github.com/JamesMGreene/node-aes256
 *
 * @param {Buffer} key A passphrase of any length to used to generate a symmetric session key.
 * @param {Buffer} encrypted The encrypted message to be decrypted.
 * @returns {Buffer} The original plain-text message or buffer.
 */
declare function decrypt(key: Buffer, encrypted: Buffer): Buffer;
export declare const AES256: {
    encrypt: typeof encrypt;
    decrypt: typeof decrypt;
};
export {};
//# sourceMappingURL=aes256.d.ts.map