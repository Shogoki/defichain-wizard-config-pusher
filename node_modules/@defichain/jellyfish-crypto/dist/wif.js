"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WIF = void 0;
const wif_1 = __importDefault(require("wif"));
const elliptic_1 = require("./elliptic");
/**
 * @param {string} wifEncoded private key
 * @param {number} version network to optionally validate
 * @return {DecodedWIF}
 * @throws Error invalid network version if version mismatch
 */
function decode(wifEncoded, version) {
    return wif_1.default.decode(wifEncoded, version);
}
/**
 * Get a EllipticPair from WIF encoded private key
 *
 * @param {string} wifEncoded private key
 * @param {number} version network to optionally validate
 * @return {EllipticPair}
 * @throws Error invalid network version if version mismatch
 */
function decodeAsEllipticPair(wifEncoded, version) {
    const { privateKey } = decode(wifEncoded, version);
    return elliptic_1.Elliptic.fromPrivKey(privateKey);
}
/**
 * @param {number} version network version to encoded WIF with
 * @param {Buffer} privKey to encode
 * @return {string} encoded WIF
 */
function encode(version, privKey) {
    return wif_1.default.encode(version, privKey, true);
}
exports.WIF = {
    /**
     * @param {string} wif private key
     * @param {number} [version] network to optionally validate
     * @return {DecodedWIF}
     * @throws Error invalid network version if version mismatch
     */
    decode(wif, version) {
        return decode(wif, version);
    },
    /**
     * @param {number} version network version to encoded WIF with
     * @param {Buffer} privKey to encode
     * @return {string} encoded WIF
     */
    encode(version, privKey) {
        return encode(version, privKey);
    },
    /**
     * Get a EllipticPair from WIF encoded private key
     *
     * @param {string} wif private key
     * @param {number} [version] network to optionally validate
     * @return EllipticPair
     * @throws Error invalid network version if version mismatch
     */
    asEllipticPair(wif, version) {
        return decodeAsEllipticPair(wif, version);
    }
};
//# sourceMappingURL=wif.js.map