/// <reference types="node" />
import { EllipticPair } from './elliptic';
interface DecodedWIF {
    readonly version: number;
    readonly privateKey: Buffer;
    readonly compressed: boolean;
}
export declare const WIF: {
    /**
     * @param {string} wif private key
     * @param {number} [version] network to optionally validate
     * @return {DecodedWIF}
     * @throws Error invalid network version if version mismatch
     */
    decode(wif: string, version?: number | undefined): DecodedWIF;
    /**
     * @param {number} version network version to encoded WIF with
     * @param {Buffer} privKey to encode
     * @return {string} encoded WIF
     */
    encode(version: number, privKey: Buffer): string;
    /**
     * Get a EllipticPair from WIF encoded private key
     *
     * @param {string} wif private key
     * @param {number} [version] network to optionally validate
     * @return EllipticPair
     * @throws Error invalid network version if version mismatch
     */
    asEllipticPair(wif: string, version?: number | undefined): EllipticPair;
};
export {};
//# sourceMappingURL=wif.d.ts.map