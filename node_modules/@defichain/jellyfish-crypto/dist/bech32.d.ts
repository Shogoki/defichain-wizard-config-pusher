/// <reference types="node" />
/**
 * Human Readable Part, prefixed to all bech32/segwit native address
 *
 * df   - DeFi MainNet
 * tf   - DeFi TestNet
 * bcrt - DeFi RegTest
 */
export declare type HRP = 'df' | 'tf' | 'bcrt';
export declare const Bech32: {
    /**
     * @param {Buffer} pubKey to format into bech32
     * @param {'df'|'tf'|'bcrt'} hrp is the human readable part
     * @param {number} [version=0x00] witness version, OP_0
     * @return {string} bech32 encoded address
     */
    fromPubKey(pubKey: Buffer, hrp: HRP, version?: 0x00): string;
    /**
     * @param {Buffer} hash160 to format into bech32
     * @param {'df'|'tf'|'bcrt'} hrp is the human readable part
     * @param {number} [version=0x00] witness version, OP_0
     * @return {string} bech32 encoded address
     */
    fromHash160(hash160: Buffer, hrp: HRP, version?: 0x00): string;
    /**
     * @param {string} address to decode from bech32
     * @param {'df'|'tf'|'bcrt'} hrp is the human readable part
     * @param {number} [version] witness version, OP_0
     * @return {Buffer} hash160 of the pubkey
     */
    toHash160(address: string, hrp?: HRP | undefined, version?: 0 | undefined): Buffer;
};
//# sourceMappingURL=bech32.d.ts.map