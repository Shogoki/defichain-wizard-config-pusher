"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DERSignature = void 0;
const bip66_1 = __importDefault(require("bip66"));
/**
 * Distinguished Encoding Rules (DER) Signatures
 *
 * The MIT License (MIT)
 * Copyright (c) 2011-2020 bitcoinjs-lib contributors
 *
 * @see https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki
 * @see https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/ts_src/script_signature.ts
 */
exports.DERSignature = {
    /**
     * @param signature to encode into DER Signature
     */
    encode(signature) {
        const r = DER.to(signature.slice(0, 32));
        const s = DER.to(signature.slice(32, 64));
        return bip66_1.default.encode(r, s);
    },
    /**
     * @param derSignature to decode
     */
    decode(derSignature) {
        const { r, s } = bip66_1.default.decode(derSignature);
        return Buffer.concat([
            DER.from(r),
            DER.from(s)
        ], 64);
    }
};
const DER = {
    to(buffer) {
        let i = 0;
        while (buffer[i] === 0) {
            ++i;
        }
        if (i === buffer.length) {
            return Buffer.alloc(1, 0);
        }
        buffer = buffer.slice(i);
        if ((buffer[0] & 0x80) !== 0) {
            return Buffer.concat([
                Buffer.alloc(1, 0),
                buffer
            ], 1 + buffer.length);
        }
        return buffer;
    },
    from(der) {
        if (der[0] === 0x00) {
            der = der.slice(1);
        }
        const buffer = Buffer.alloc(32, 0);
        const copyStart = Math.max(0, 32 - der.length);
        der.copy(buffer, copyStart);
        return buffer;
    }
};
//# sourceMappingURL=der.js.map