"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Elliptic = void 0;
const randombytes_1 = __importDefault(require("randombytes"));
const tiny_secp256k1_1 = __importDefault(require("tiny-secp256k1"));
const der_1 = require("./der");
/**
 * Wraps secp256k1 from 'tiny-secp256k1' & 'bip66'
 */
class SECP256K1 {
    constructor(privKey) {
        this.privKey = privKey;
        const pubKey = tiny_secp256k1_1.default.pointFromScalar(privKey, true);
        if (pubKey === null) {
            throw new Error('point at infinity');
        }
        this.pubKey = pubKey;
    }
    privateKey() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.privKey;
        });
    }
    publicKey() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.pubKey;
        });
    }
    sign(hash) {
        return __awaiter(this, void 0, void 0, function* () {
            let signature = tiny_secp256k1_1.default.sign(hash, this.privKey);
            const extraData = Buffer.alloc(32, 0);
            let counter = 0;
            // if first try is lowR, skip the loop, for second try and on, add extra entropy counting up
            while (signature[0] > 0x7f) {
                counter++;
                extraData.writeUIntLE(counter, 0, 6);
                // @ts-expect-error
                signature = tiny_secp256k1_1.default.signWithEntropy(hash, this.privKey, extraData);
            }
            return der_1.DERSignature.encode(signature);
        });
    }
    verify(hash, derSignature) {
        return __awaiter(this, void 0, void 0, function* () {
            const signature = der_1.DERSignature.decode(derSignature);
            return tiny_secp256k1_1.default.verify(hash, this.pubKey, signature);
        });
    }
}
exports.Elliptic = {
    /**
     * @param {Buffer} buffer in little endian
     * @return {SECP256K1} EllipticPair
     */
    fromPrivKey(buffer) {
        return new SECP256K1(buffer);
    },
    /**
     * @param {(number) => Buffer} [rng = randomBytes] cryptographically strong random values generator required
     * @return {SECP256K1} EllipticPair
     */
    random(rng = randombytes_1.default) {
        const buffer = rng(32);
        if (buffer.length !== 32) {
            throw new Error('Buffer length must be 32 bytes long');
        }
        return new SECP256K1(buffer);
    }
};
//# sourceMappingURL=elliptic.js.map