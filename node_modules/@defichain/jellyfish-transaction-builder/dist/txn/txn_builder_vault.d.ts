import { Script, TransactionSegWit, CreateVault, UpdateVault, DepositToVault, WithdrawFromVault, CloseVault, PlaceAuctionBid } from '@defichain/jellyfish-transaction';
import { P2WPKHTxnBuilder } from './txn_builder';
export declare class TxnBuilderVault extends P2WPKHTxnBuilder {
    /**
     * Creates vault transaction.
     *
     * @param {CreateVault} createVault txn to create
     * @param {Script} changeScript to send unspent to after deducting the (converted + fees)
     * @returns {Promise<TransactionSegWit>}
     */
    createVault(createVault: CreateVault, changeScript: Script): Promise<TransactionSegWit>;
    /**
     * Create update vault transaction.
     *
     * @param {UpdateVault} updateVault txn to create
     * @param {Script} changeScript to send unspent to after deducting the (converted + fees)
     * @returns {Promise<TransactionSegWit>}
     */
    updateVault(updateVault: UpdateVault, changeScript: Script): Promise<TransactionSegWit>;
    /**
     * Deposit to vault transaction.
     *
     * @param {DepositToVault} depositToVault txn to create
     * @param {Script} changeScript to send unspent to after deducting the (converted + fees)
     * @returns {Promise<TransactionSegWit>}
     */
    depositToVault(depositToVault: DepositToVault, changeScript: Script): Promise<TransactionSegWit>;
    /**
     * Withdraw from vault transaction.
     *
     * @param {withdrawFromVault} withdrawFromVault txn to create
     * @param {Script} changeScript to send unspent to after deducting the (converted + fees)
     * @returns {Promise<TransactionSegWit>}
     */
    withdrawFromVault(withdrawFromVault: WithdrawFromVault, changeScript: Script): Promise<TransactionSegWit>;
    /**
     * Close a vault.
     *
     * @param {CloseVault} closeVault txn to create
     * @param {Script} changeScript to send unspent to after deducting the (converted + fees)
     * @returns {Promise<TransactionSegWit>}
     */
    closeVault(closeVault: CloseVault, changeScript: Script): Promise<TransactionSegWit>;
    /**
     * placeAuctionBid transaction.
     *
     * @param {PlaceAuctionBid} placeAuctionBid txn to create
     * @param {Script} changeScript to send unspent to after deducting the (converted + fees)
     * @returns {Promise<TransactionSegWit>}
     */
    placeAuctionBid(placeAuctionBid: PlaceAuctionBid, changeScript: Script): Promise<TransactionSegWit>;
}
//# sourceMappingURL=txn_builder_vault.d.ts.map