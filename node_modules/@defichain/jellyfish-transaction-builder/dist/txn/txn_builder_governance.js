"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxnBuilderGovernance = void 0;
const jellyfish_transaction_1 = require("@defichain/jellyfish-transaction");
const txn_builder_1 = require("./txn_builder");
const txn_builder_error_1 = require("./txn_builder_error");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
class TxnBuilderGovernance extends txn_builder_1.P2WPKHTxnBuilder {
    /**
     * Creates a Community fund proposal.
     *
     * @param {CreateCfp} createCfp txn to create
     * @param {Script} changeScript to send unspent to after deducting the (converted + fees)
     * @returns {Promise<TransactionSegWit>}
     */
    createCfp(createCfp, changeScript) {
        return __awaiter(this, void 0, void 0, function* () {
            const creationFee = this.network.name === 'regtest' ? new bignumber_js_1.default('1') : new bignumber_js_1.default('10');
            return yield this.createDeFiTx(jellyfish_transaction_1.OP_CODES.OP_DEFI_TX_CREATE_CFP(createCfp), changeScript, creationFee);
        });
    }
    /**
     * Creates a vote of confidence.
     *
     * @param {CreateVoc} createVoc txn to create
     * @param {Script} changeScript to send unspent to after deducting the (converted + fees)
     * @returns {Promise<TransactionSegWit>}
     */
    createVoc(createVoc, changeScript) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!createVoc.amount.isEqualTo(new bignumber_js_1.default(0))) {
                throw new txn_builder_error_1.TxnBuilderError(txn_builder_error_1.TxnBuilderErrorType.INVALID_VOC_AMOUNT, 'CreateVoc amount should be 0');
            }
            if (createVoc.address.stack.length !== 0) {
                throw new txn_builder_error_1.TxnBuilderError(txn_builder_error_1.TxnBuilderErrorType.INVALID_VOC_ADDRESS, 'CreateVoc address stack should be empty');
            }
            const creationFee = this.network.name === 'regtest' ? new bignumber_js_1.default('5') : new bignumber_js_1.default('50');
            return yield this.createDeFiTx(jellyfish_transaction_1.OP_CODES.OP_DEFI_TX_CREATE_VOC(createVoc), changeScript, creationFee);
        });
    }
    /**
     * Vote on a community proposal.
     *
     * @param {Vote} vote txn to create
     * @param {Script} changeScript to send unspent to after deducting the (converted + fees)
     * @returns {Promise<TransactionSegWit>}
     */
    vote(vote, changeScript) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.createDeFiTx(jellyfish_transaction_1.OP_CODES.OP_DEFI_TX_VOTE(vote), changeScript);
        });
    }
    /**
     * Set governance variable.
     *
     * @param {SetGovernance} setGov txn to create
     * @param {Script} changeScript to send unspent to after deducting the fee
     * @returns {Promise<TransactionSegWit>}
     */
    setGoverance(setGov, changeScript) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.createDeFiTx(jellyfish_transaction_1.OP_CODES.OP_DEFI_TX_SET_GOVERNANCE(setGov), changeScript);
        });
    }
    /**
     * Set governance variable with activation height.
     *
     * @param {SetGovernanceHeight} setGovHeight txn to create
     * @param {Script} changeScript to send unspent to after deducting the fee
     * @returns {Promise<TransactionSegWit>}
     */
    setGoveranceHeight(setGovHeight, changeScript) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.createDeFiTx(jellyfish_transaction_1.OP_CODES.OP_DEFI_TX_SET_GOVERNANCE_HEIGHT(setGovHeight), changeScript);
        });
    }
}
exports.TxnBuilderGovernance = TxnBuilderGovernance;
//# sourceMappingURL=txn_builder_governance.js.map