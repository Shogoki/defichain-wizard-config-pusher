"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxnBuilderDex = void 0;
const jellyfish_transaction_1 = require("@defichain/jellyfish-transaction");
const txn_builder_1 = require("./txn_builder");
class TxnBuilderDex extends txn_builder_1.P2WPKHTxnBuilder {
    /**
     * Requires at least 0.01 DFI to create transaction, actual fees are much lower.
     *
     * @param {PoolSwap} poolSwap txn to create
     * @param {Script} changeScript to send unspent to after deducting the fees
     */
    poolSwap(poolSwap, changeScript) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.createDeFiTx(jellyfish_transaction_1.OP_CODES.OP_DEFI_TX_POOL_SWAP(poolSwap), changeScript);
        });
    }
    /**
     * Requires at least 0.01 DFI to create transaction, actual fees are much lower.
     *
     * @param {CompositeSwap} compositeSwap txn to create
     * @param {Script} changeScript to send unspent to after deducting the fees
     */
    compositeSwap(compositeSwap, changeScript) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.createDeFiTx(jellyfish_transaction_1.OP_CODES.OP_DEFI_TX_COMPOSITE_SWAP(compositeSwap), changeScript);
        });
    }
}
exports.TxnBuilderDex = TxnBuilderDex;
//# sourceMappingURL=txn_builder_dex.js.map