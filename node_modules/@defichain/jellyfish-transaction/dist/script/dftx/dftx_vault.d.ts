import { BufferComposer, ComposableBuffer } from '@defichain/jellyfish-buffer';
import { TokenBalanceVarInt } from './dftx_balance';
import { Script } from '../../tx';
/**
 * CreateVault DeFi Transaction
 */
export interface CreateVault {
    ownerAddress: Script;
    schemeId: string;
}
/**
 * Composable CreateVault, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
export declare class CCreateVault extends ComposableBuffer<CreateVault> {
    static OP_CODE: number;
    static OP_NAME: string;
    composers(cv: CreateVault): BufferComposer[];
}
/**
 * UpdateVault DeFi Transaction
 */
export interface UpdateVault {
    vaultId: string;
    ownerAddress: Script;
    schemeId: string;
}
/**
 * Composable UpdateVault, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
export declare class CUpdateVault extends ComposableBuffer<UpdateVault> {
    static OP_CODE: number;
    static OP_NAME: string;
    composers(uv: UpdateVault): BufferComposer[];
}
/**
 * DepositToVault DeFi Transaction
 */
export interface DepositToVault {
    vaultId: string;
    from: Script;
    tokenAmount: TokenBalanceVarInt;
}
/**
 * Composable DepositToVault, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
export declare class CDepositToVault extends ComposableBuffer<DepositToVault> {
    static OP_CODE: number;
    static OP_NAME: string;
    composers(dtv: DepositToVault): BufferComposer[];
}
/**
 * WithdrawFromVault DeFi Transaction
 */
export interface WithdrawFromVault {
    vaultId: string;
    to: Script;
    tokenAmount: TokenBalanceVarInt;
}
/**
 * Composable WithdrawFromVault, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
export declare class CWithdrawFromVault extends ComposableBuffer<WithdrawFromVault> {
    static OP_CODE: number;
    static OP_NAME: string;
    composers(dtv: WithdrawFromVault): BufferComposer[];
}
/**
 * CloseVault DeFi Transaction
 */
export interface CloseVault {
    vaultId: string;
    to: Script;
}
/**
 * Composable CloseVault, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
export declare class CCloseVault extends ComposableBuffer<CloseVault> {
    static OP_CODE: number;
    static OP_NAME: string;
    composers(cv: CloseVault): BufferComposer[];
}
/**
 * PlaceAuctionBid DeFi Transaction
 */
export interface PlaceAuctionBid {
    vaultId: string;
    index: number;
    from: Script;
    tokenAmount: TokenBalanceVarInt;
}
/**
 * Composable PlaceAuctionBid, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
export declare class CPlaceAuctionBid extends ComposableBuffer<PlaceAuctionBid> {
    static OP_CODE: number;
    static OP_NAME: string;
    composers(pab: PlaceAuctionBid): BufferComposer[];
}
//# sourceMappingURL=dftx_vault.d.ts.map