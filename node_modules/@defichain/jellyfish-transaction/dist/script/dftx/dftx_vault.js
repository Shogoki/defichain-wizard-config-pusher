"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CPlaceAuctionBid = exports.CCloseVault = exports.CWithdrawFromVault = exports.CDepositToVault = exports.CUpdateVault = exports.CCreateVault = void 0;
const jellyfish_buffer_1 = require("@defichain/jellyfish-buffer");
const dftx_balance_1 = require("./dftx_balance");
const tx_composer_1 = require("../../tx_composer");
/**
 * Composable CreateVault, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
class CCreateVault extends jellyfish_buffer_1.ComposableBuffer {
    composers(cv) {
        return [
            jellyfish_buffer_1.ComposableBuffer.single(() => cv.ownerAddress, v => cv.ownerAddress = v, v => new tx_composer_1.CScript(v)),
            jellyfish_buffer_1.ComposableBuffer.compactSizeUtf8BE(() => cv.schemeId, v => cv.schemeId = v)
        ];
    }
}
exports.CCreateVault = CCreateVault;
CCreateVault.OP_CODE = 0x56; // 'V'
CCreateVault.OP_NAME = 'OP_DEFI_TX_CREATE_VAULT';
/**
 * Composable UpdateVault, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
class CUpdateVault extends jellyfish_buffer_1.ComposableBuffer {
    composers(uv) {
        return [
            jellyfish_buffer_1.ComposableBuffer.hexBEBufferLE(32, () => uv.vaultId, v => uv.vaultId = v),
            jellyfish_buffer_1.ComposableBuffer.single(() => uv.ownerAddress, v => uv.ownerAddress = v, v => new tx_composer_1.CScript(v)),
            jellyfish_buffer_1.ComposableBuffer.compactSizeUtf8BE(() => uv.schemeId, v => uv.schemeId = v)
        ];
    }
}
exports.CUpdateVault = CUpdateVault;
CUpdateVault.OP_CODE = 0x76; // 'v'
CUpdateVault.OP_NAME = 'OP_DEFI_TX_UPDATE_VAULT';
/**
 * Composable DepositToVault, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
class CDepositToVault extends jellyfish_buffer_1.ComposableBuffer {
    composers(dtv) {
        return [
            jellyfish_buffer_1.ComposableBuffer.hexBEBufferLE(32, () => dtv.vaultId, v => dtv.vaultId = v),
            jellyfish_buffer_1.ComposableBuffer.single(() => dtv.from, v => dtv.from = v, v => new tx_composer_1.CScript(v)),
            jellyfish_buffer_1.ComposableBuffer.single(() => dtv.tokenAmount, v => dtv.tokenAmount = v, v => new dftx_balance_1.CTokenBalanceVarInt(v))
        ];
    }
}
exports.CDepositToVault = CDepositToVault;
CDepositToVault.OP_CODE = 0x53; // 'S'
CDepositToVault.OP_NAME = 'OP_DEFI_TX_DEPOSIT_TO_VAULT';
/**
 * Composable WithdrawFromVault, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
class CWithdrawFromVault extends jellyfish_buffer_1.ComposableBuffer {
    composers(dtv) {
        return [
            jellyfish_buffer_1.ComposableBuffer.hexBEBufferLE(32, () => dtv.vaultId, v => dtv.vaultId = v),
            jellyfish_buffer_1.ComposableBuffer.single(() => dtv.to, v => dtv.to = v, v => new tx_composer_1.CScript(v)),
            jellyfish_buffer_1.ComposableBuffer.single(() => dtv.tokenAmount, v => dtv.tokenAmount = v, v => new dftx_balance_1.CTokenBalanceVarInt(v))
        ];
    }
}
exports.CWithdrawFromVault = CWithdrawFromVault;
CWithdrawFromVault.OP_CODE = 0x4A; // 'J'
CWithdrawFromVault.OP_NAME = 'OP_DEFI_TX_WITHDRAW_FROM_VAULT';
/**
 * Composable CloseVault, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
class CCloseVault extends jellyfish_buffer_1.ComposableBuffer {
    composers(cv) {
        return [
            jellyfish_buffer_1.ComposableBuffer.hexBEBufferLE(32, () => cv.vaultId, v => cv.vaultId = v),
            jellyfish_buffer_1.ComposableBuffer.single(() => cv.to, v => cv.to = v, v => new tx_composer_1.CScript(v))
        ];
    }
}
exports.CCloseVault = CCloseVault;
CCloseVault.OP_CODE = 0x65; // 'e'
CCloseVault.OP_NAME = 'OP_DEFI_TX_CLOSE_VAULT';
/**
 * Composable PlaceAuctionBid, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
class CPlaceAuctionBid extends jellyfish_buffer_1.ComposableBuffer {
    composers(pab) {
        return [
            jellyfish_buffer_1.ComposableBuffer.hexBEBufferLE(32, () => pab.vaultId, v => pab.vaultId = v),
            jellyfish_buffer_1.ComposableBuffer.uInt32(() => pab.index, v => pab.index = v),
            jellyfish_buffer_1.ComposableBuffer.single(() => pab.from, v => pab.from = v, v => new tx_composer_1.CScript(v)),
            jellyfish_buffer_1.ComposableBuffer.single(() => pab.tokenAmount, v => pab.tokenAmount = v, v => new dftx_balance_1.CTokenBalanceVarInt(v))
        ];
    }
}
exports.CPlaceAuctionBid = CPlaceAuctionBid;
CPlaceAuctionBid.OP_CODE = 0x49; // 'I'
CPlaceAuctionBid.OP_NAME = 'OP_DEFI_TX_AUCTION_BID';
//# sourceMappingURL=dftx_vault.js.map