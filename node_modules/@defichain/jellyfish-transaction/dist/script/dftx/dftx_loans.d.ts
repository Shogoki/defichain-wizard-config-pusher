import { BufferComposer, ComposableBuffer } from '@defichain/jellyfish-buffer';
import { TokenBalanceUInt32 } from './dftx_balance';
import BigNumber from 'bignumber.js';
import { Script } from '../../tx';
import { CurrencyPair } from './dftx_price';
/**
 * CreateLoanScheme / UpdateLoanScheme DeFi Transaction
 */
export interface SetLoanScheme {
    ratio: number;
    rate: BigNumber;
    identifier: string;
    update: BigNumber;
}
/**
 * Composable CreateLoanScheme and UpdateLoanScheme, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
export declare class CSetLoanScheme extends ComposableBuffer<SetLoanScheme> {
    static OP_CODE: number;
    static OP_NAME: string;
    composers(sls: SetLoanScheme): BufferComposer[];
}
/**
 * DestroyLoanScheme DeFi Transaction
 */
export interface DestroyLoanScheme {
    identifier: string;
    height: BigNumber;
}
/**
 * Composable DestroyLoanScheme, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
export declare class CDestroyLoanScheme extends ComposableBuffer<DestroyLoanScheme> {
    static OP_CODE: number;
    static OP_NAME: string;
    composers(dls: DestroyLoanScheme): BufferComposer[];
}
/**
 * SetDefaultLoanScheme DeFi Transaction
 */
export interface SetDefaultLoanScheme {
    identifier: string;
}
/**
 * Composable SetDefaultLoanScheme, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
export declare class CSetDefaultLoanScheme extends ComposableBuffer<SetDefaultLoanScheme> {
    static OP_CODE: number;
    static OP_NAME: string;
    composers(sdls: SetDefaultLoanScheme): BufferComposer[];
}
/**
 * SetCollateralToken DeFi Transaction
 */
export interface SetCollateralToken {
    token: number;
    factor: BigNumber;
    currencyPair: CurrencyPair;
    activateAfterBlock: number;
}
/**
 * Composable SetCollateralToken, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
export declare class CSetCollateralToken extends ComposableBuffer<SetCollateralToken> {
    static OP_CODE: number;
    static OP_NAME: string;
    composers(sct: SetCollateralToken): BufferComposer[];
}
/**
 * SetLoanToken DeFi Transaction
 */
export interface SetLoanToken {
    symbol: string;
    name: string;
    currencyPair: CurrencyPair;
    mintable: boolean;
    interest: BigNumber;
}
/**
 * Composable SetLoanToken, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
export declare class CSetLoanToken extends ComposableBuffer<SetLoanToken> {
    static OP_CODE: number;
    static OP_NAME: string;
    composers(slt: SetLoanToken): BufferComposer[];
}
/**
 * UpdateLoanToken DeFi Transaction
 */
export interface UpdateLoanToken {
    symbol: string;
    name: string;
    currencyPair: CurrencyPair;
    mintable: boolean;
    interest: BigNumber;
    tokenTx: string;
}
/**
 * Composable UpdateLoanToken, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
export declare class CUpdateLoanToken extends ComposableBuffer<UpdateLoanToken> {
    static OP_CODE: number;
    static OP_NAME: string;
    composers(ult: UpdateLoanToken): BufferComposer[];
}
/**
 * TakeLoan DeFi Transaction
 */
export interface TakeLoan {
    vaultId: string;
    to: Script;
    tokenAmounts: TokenBalanceUInt32[];
}
/**
 * Composable TakeLoan, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
export declare class CTakeLoan extends ComposableBuffer<TakeLoan> {
    static OP_CODE: number;
    static OP_NAME: string;
    composers(tl: TakeLoan): BufferComposer[];
}
/**
 * PaybackLoan DeFi Transaction
 */
export interface PaybackLoan {
    vaultId: string;
    from: Script;
    tokenAmounts: TokenBalanceUInt32[];
}
/**
 * Composable PaybackLoan, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
export declare class CPaybackLoan extends ComposableBuffer<PaybackLoan> {
    static OP_CODE: number;
    static OP_NAME: string;
    composers(pl: PaybackLoan): BufferComposer[];
}
export interface TokenPayback {
    dToken: number;
    amounts: TokenBalanceUInt32[];
}
/**
 * Composable TokenPayback, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
export declare class CTokenPayback extends ComposableBuffer<TokenPayback> {
    composers(tp: TokenPayback): BufferComposer[];
}
/**
 * PaybackLoanV2 DeFi Transaction
 */
export interface PaybackLoanV2 {
    vaultId: string;
    from: Script;
    loans: TokenPayback[];
}
/**
 * Composable PaybackLoanV2, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
export declare class CPaybackLoanV2 extends ComposableBuffer<PaybackLoanV2> {
    static OP_CODE: number;
    static OP_NAME: string;
    composers(pl: PaybackLoanV2): BufferComposer[];
}
/**
 * @deprecated
 */
export * from './dftx_vault';
//# sourceMappingURL=dftx_loans.d.ts.map