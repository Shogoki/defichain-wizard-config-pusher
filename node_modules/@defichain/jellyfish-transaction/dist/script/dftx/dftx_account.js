"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CSetFutureSwap = exports.CAnyAccountToAccount = exports.CAccountToAccount = exports.CAccountToUtxos = exports.CUtxosToAccount = void 0;
const jellyfish_buffer_1 = require("@defichain/jellyfish-buffer");
const tx_composer_1 = require("../../tx_composer");
const dftx_balance_1 = require("./dftx_balance");
/**
 * Composable UtxosToAccount, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
class CUtxosToAccount extends jellyfish_buffer_1.ComposableBuffer {
    composers(u2a) {
        return [
            jellyfish_buffer_1.ComposableBuffer.compactSizeArray(() => u2a.to, v => u2a.to = v, v => new dftx_balance_1.CScriptBalances(v))
        ];
    }
}
exports.CUtxosToAccount = CUtxosToAccount;
CUtxosToAccount.OP_CODE = 0x55; // 'U'
CUtxosToAccount.OP_NAME = 'OP_DEFI_TX_UTXOS_TO_ACCOUNT';
/**
 * Composable AccountToUtxos, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
class CAccountToUtxos extends jellyfish_buffer_1.ComposableBuffer {
    composers(a2u) {
        return [
            jellyfish_buffer_1.ComposableBuffer.single(() => a2u.from, v => a2u.from = v, v => new tx_composer_1.CScript(v)),
            jellyfish_buffer_1.ComposableBuffer.compactSizeArray(() => a2u.balances, v => a2u.balances = v, v => new dftx_balance_1.CTokenBalance(v)),
            jellyfish_buffer_1.ComposableBuffer.varInt(() => a2u.mintingOutputsStart, v => a2u.mintingOutputsStart = v)
        ];
    }
}
exports.CAccountToUtxos = CAccountToUtxos;
CAccountToUtxos.OP_CODE = 0x62; // 'b'
CAccountToUtxos.OP_NAME = 'OP_DEFI_TX_ACCOUNT_TO_UTXOS';
/**
 * Composable AccountToAccount, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
class CAccountToAccount extends jellyfish_buffer_1.ComposableBuffer {
    composers(a2a) {
        return [
            jellyfish_buffer_1.ComposableBuffer.single(() => a2a.from, v => a2a.from = v, v => new tx_composer_1.CScript(v)),
            jellyfish_buffer_1.ComposableBuffer.compactSizeArray(() => a2a.to, v => a2a.to = v, v => new dftx_balance_1.CScriptBalances(v))
        ];
    }
}
exports.CAccountToAccount = CAccountToAccount;
CAccountToAccount.OP_CODE = 0x42; // 'B'
CAccountToAccount.OP_NAME = 'OP_DEFI_TX_ACCOUNT_TO_ACCOUNT';
/**
 * Composable AnyAccountToAccount, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
class CAnyAccountToAccount extends jellyfish_buffer_1.ComposableBuffer {
    composers(aa2a) {
        return [
            jellyfish_buffer_1.ComposableBuffer.compactSizeArray(() => aa2a.from, v => aa2a.from = v, v => new dftx_balance_1.CScriptBalances(v)),
            jellyfish_buffer_1.ComposableBuffer.compactSizeArray(() => aa2a.to, v => aa2a.to = v, v => new dftx_balance_1.CScriptBalances(v))
        ];
    }
}
exports.CAnyAccountToAccount = CAnyAccountToAccount;
CAnyAccountToAccount.OP_CODE = 0x61; // 'a'
CAnyAccountToAccount.OP_NAME = 'OP_DEFI_TX_ANY_ACCOUNT_TO_ACCOUNT';
/**
 * Composable FutureSwap, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
class CSetFutureSwap extends jellyfish_buffer_1.ComposableBuffer {
    composers(sfs) {
        return [
            jellyfish_buffer_1.ComposableBuffer.single(() => sfs.owner, v => sfs.owner = v, v => new tx_composer_1.CScript(v)),
            jellyfish_buffer_1.ComposableBuffer.single(() => sfs.source, v => sfs.source = v, v => new dftx_balance_1.CTokenBalanceVarInt(v)),
            jellyfish_buffer_1.ComposableBuffer.uInt32(() => sfs.destination, v => sfs.destination = v),
            jellyfish_buffer_1.ComposableBuffer.uBool8(() => sfs.withdraw, v => sfs.withdraw = v)
        ];
    }
}
exports.CSetFutureSwap = CSetFutureSwap;
CSetFutureSwap.OP_CODE = 0x51; // 'Q'
CSetFutureSwap.OP_NAME = 'OP_DEFI_TX_FUTURE_SWAP';
//# sourceMappingURL=dftx_account.js.map