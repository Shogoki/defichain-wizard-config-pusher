import { BufferComposer, ComposableBuffer } from '@defichain/jellyfish-buffer';
import { Script } from '../../tx';
import { ScriptBalances, TokenBalanceUInt32, TokenBalanceVarInt } from './dftx_balance';
/**
 * UtxosToAccount DeFi Transaction
 */
export interface UtxosToAccount {
    to: ScriptBalances[];
}
/**
 * Composable UtxosToAccount, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
export declare class CUtxosToAccount extends ComposableBuffer<UtxosToAccount> {
    static OP_CODE: number;
    static OP_NAME: string;
    composers(u2a: UtxosToAccount): BufferComposer[];
}
/**
 * AccountToUtxos DeFi Transaction
 */
export interface AccountToUtxos {
    from: Script;
    balances: TokenBalanceUInt32[];
    mintingOutputsStart: number;
}
/**
 * Composable AccountToUtxos, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
export declare class CAccountToUtxos extends ComposableBuffer<AccountToUtxos> {
    static OP_CODE: number;
    static OP_NAME: string;
    composers(a2u: AccountToUtxos): BufferComposer[];
}
/**
 * AccountToAccount DeFi Transaction
 */
export interface AccountToAccount {
    from: Script;
    to: ScriptBalances[];
}
/**
 * Composable AccountToAccount, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
export declare class CAccountToAccount extends ComposableBuffer<AccountToAccount> {
    static OP_CODE: number;
    static OP_NAME: string;
    composers(a2a: AccountToAccount): BufferComposer[];
}
/**
 * AnyAccountToAccount DeFi Transaction
 */
export interface AnyAccountToAccount {
    from: ScriptBalances[];
    to: ScriptBalances[];
}
/**
 * Composable AnyAccountToAccount, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
export declare class CAnyAccountToAccount extends ComposableBuffer<AnyAccountToAccount> {
    static OP_CODE: number;
    static OP_NAME: string;
    composers(aa2a: AnyAccountToAccount): BufferComposer[];
}
/**
 * FutureSwap DeFi Transaction
 */
export interface SetFutureSwap {
    owner: Script;
    source: TokenBalanceVarInt;
    destination: number;
    withdraw: boolean;
}
/**
 * Composable FutureSwap, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
export declare class CSetFutureSwap extends ComposableBuffer<SetFutureSwap> {
    static OP_CODE: number;
    static OP_NAME: string;
    composers(sfs: SetFutureSwap): BufferComposer[];
}
//# sourceMappingURL=dftx_account.d.ts.map