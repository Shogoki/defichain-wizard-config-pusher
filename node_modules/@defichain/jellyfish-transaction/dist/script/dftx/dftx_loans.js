"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CPaybackLoanV2 = exports.CTokenPayback = exports.CPaybackLoan = exports.CTakeLoan = exports.CUpdateLoanToken = exports.CSetLoanToken = exports.CSetCollateralToken = exports.CSetDefaultLoanScheme = exports.CDestroyLoanScheme = exports.CSetLoanScheme = void 0;
const jellyfish_buffer_1 = require("@defichain/jellyfish-buffer");
const dftx_balance_1 = require("./dftx_balance");
const tx_composer_1 = require("../../tx_composer");
const dftx_price_1 = require("./dftx_price");
/**
 * Composable CreateLoanScheme and UpdateLoanScheme, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
class CSetLoanScheme extends jellyfish_buffer_1.ComposableBuffer {
    composers(sls) {
        return [
            jellyfish_buffer_1.ComposableBuffer.uInt32(() => sls.ratio, v => sls.ratio = v),
            jellyfish_buffer_1.ComposableBuffer.satoshiAsBigNumber(() => sls.rate, v => sls.rate = v),
            jellyfish_buffer_1.ComposableBuffer.compactSizeUtf8BE(() => sls.identifier, v => sls.identifier = v),
            jellyfish_buffer_1.ComposableBuffer.bigNumberUInt64(() => sls.update, v => sls.update = v)
        ];
    }
}
exports.CSetLoanScheme = CSetLoanScheme;
CSetLoanScheme.OP_CODE = 0x4c; // 'L'
CSetLoanScheme.OP_NAME = 'OP_DEFI_TX_SET_LOAN_SCHEME';
/**
 * Composable DestroyLoanScheme, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
class CDestroyLoanScheme extends jellyfish_buffer_1.ComposableBuffer {
    composers(dls) {
        return [
            jellyfish_buffer_1.ComposableBuffer.compactSizeUtf8BE(() => dls.identifier, v => dls.identifier = v),
            jellyfish_buffer_1.ComposableBuffer.bigNumberUInt64(() => dls.height, v => dls.height = v)
        ];
    }
}
exports.CDestroyLoanScheme = CDestroyLoanScheme;
CDestroyLoanScheme.OP_CODE = 0x44; // 'D'
CDestroyLoanScheme.OP_NAME = 'OP_DEFI_TX_DESTROY_LOAN_SCHEME';
/**
 * Composable SetDefaultLoanScheme, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
class CSetDefaultLoanScheme extends jellyfish_buffer_1.ComposableBuffer {
    composers(sdls) {
        return [
            jellyfish_buffer_1.ComposableBuffer.compactSizeUtf8BE(() => sdls.identifier, v => sdls.identifier = v)
        ];
    }
}
exports.CSetDefaultLoanScheme = CSetDefaultLoanScheme;
CSetDefaultLoanScheme.OP_CODE = 0x64; // 'd'
CSetDefaultLoanScheme.OP_NAME = 'OP_DEFI_TX_SET_DEFAULT_LOAN_SCHEME';
/**
 * Composable SetCollateralToken, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
class CSetCollateralToken extends jellyfish_buffer_1.ComposableBuffer {
    composers(sct) {
        return [
            jellyfish_buffer_1.ComposableBuffer.varInt(() => sct.token, v => sct.token = v),
            jellyfish_buffer_1.ComposableBuffer.satoshiAsBigNumber(() => sct.factor, v => sct.factor = v),
            jellyfish_buffer_1.ComposableBuffer.single(() => sct.currencyPair, v => sct.currencyPair = v, sct => new dftx_price_1.CCurrencyPair(sct)),
            jellyfish_buffer_1.ComposableBuffer.uInt32(() => sct.activateAfterBlock, v => sct.activateAfterBlock = v)
        ];
    }
}
exports.CSetCollateralToken = CSetCollateralToken;
CSetCollateralToken.OP_CODE = 0x63; // 'c'
CSetCollateralToken.OP_NAME = 'OP_DEFI_TX_SET_COLLATERAL_TOKEN';
/**
 * Composable SetLoanToken, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
class CSetLoanToken extends jellyfish_buffer_1.ComposableBuffer {
    composers(slt) {
        return [
            jellyfish_buffer_1.ComposableBuffer.compactSizeUtf8BE(() => slt.symbol, v => slt.symbol = v),
            jellyfish_buffer_1.ComposableBuffer.compactSizeUtf8BE(() => slt.name, v => slt.name = v),
            jellyfish_buffer_1.ComposableBuffer.single(() => slt.currencyPair, v => slt.currencyPair = v, v => new dftx_price_1.CCurrencyPair(v)),
            jellyfish_buffer_1.ComposableBuffer.uBool8(() => slt.mintable, v => slt.mintable = v),
            jellyfish_buffer_1.ComposableBuffer.satoshiAsBigNumber(() => slt.interest, v => slt.interest = v)
        ];
    }
}
exports.CSetLoanToken = CSetLoanToken;
CSetLoanToken.OP_CODE = 0x67; // 'g'
CSetLoanToken.OP_NAME = 'OP_DEFI_TX_SET_LOAN_TOKEN';
/**
 * Composable UpdateLoanToken, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
class CUpdateLoanToken extends jellyfish_buffer_1.ComposableBuffer {
    composers(ult) {
        return [
            jellyfish_buffer_1.ComposableBuffer.compactSizeUtf8BE(() => ult.symbol, v => ult.symbol = v),
            jellyfish_buffer_1.ComposableBuffer.compactSizeUtf8BE(() => ult.name, v => ult.name = v),
            jellyfish_buffer_1.ComposableBuffer.single(() => ult.currencyPair, v => ult.currencyPair = v, v => new dftx_price_1.CCurrencyPair(v)),
            jellyfish_buffer_1.ComposableBuffer.uBool8(() => ult.mintable, v => ult.mintable = v),
            jellyfish_buffer_1.ComposableBuffer.satoshiAsBigNumber(() => ult.interest, v => ult.interest = v),
            jellyfish_buffer_1.ComposableBuffer.hexBEBufferLE(32, () => ult.tokenTx, v => ult.tokenTx = v)
        ];
    }
}
exports.CUpdateLoanToken = CUpdateLoanToken;
CUpdateLoanToken.OP_CODE = 0x78; // 'x'
CUpdateLoanToken.OP_NAME = 'OP_DEFI_TX_UPDATE_LOAN_TOKEN';
/**
 * Composable TakeLoan, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
class CTakeLoan extends jellyfish_buffer_1.ComposableBuffer {
    composers(tl) {
        return [
            jellyfish_buffer_1.ComposableBuffer.hexBEBufferLE(32, () => tl.vaultId, v => tl.vaultId = v),
            jellyfish_buffer_1.ComposableBuffer.single(() => tl.to, v => tl.to = v, v => new tx_composer_1.CScript(v)),
            jellyfish_buffer_1.ComposableBuffer.compactSizeArray(() => tl.tokenAmounts, v => tl.tokenAmounts = v, v => new dftx_balance_1.CTokenBalance(v))
        ];
    }
}
exports.CTakeLoan = CTakeLoan;
CTakeLoan.OP_CODE = 0x58; // 'X'
CTakeLoan.OP_NAME = 'OP_DEFI_TX_TAKE_LOAN';
/**
 * Composable PaybackLoan, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
class CPaybackLoan extends jellyfish_buffer_1.ComposableBuffer {
    composers(pl) {
        return [
            jellyfish_buffer_1.ComposableBuffer.hexBEBufferLE(32, () => pl.vaultId, v => pl.vaultId = v),
            jellyfish_buffer_1.ComposableBuffer.single(() => pl.from, v => pl.from = v, v => new tx_composer_1.CScript(v)),
            jellyfish_buffer_1.ComposableBuffer.compactSizeArray(() => pl.tokenAmounts, v => pl.tokenAmounts = v, v => new dftx_balance_1.CTokenBalance(v))
        ];
    }
}
exports.CPaybackLoan = CPaybackLoan;
CPaybackLoan.OP_CODE = 0x48; // 'H'
CPaybackLoan.OP_NAME = 'OP_DEFI_TX_PAYBACK_LOAN';
/**
 * Composable TokenPayback, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
class CTokenPayback extends jellyfish_buffer_1.ComposableBuffer {
    composers(tp) {
        return [
            jellyfish_buffer_1.ComposableBuffer.varInt(() => tp.dToken, v => tp.dToken = v),
            jellyfish_buffer_1.ComposableBuffer.compactSizeArray(() => tp.amounts, v => tp.amounts = v, v => new dftx_balance_1.CTokenBalance(v))
        ];
    }
}
exports.CTokenPayback = CTokenPayback;
/**
 * Composable PaybackLoanV2, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
class CPaybackLoanV2 extends jellyfish_buffer_1.ComposableBuffer {
    composers(pl) {
        return [
            jellyfish_buffer_1.ComposableBuffer.hexBEBufferLE(32, () => pl.vaultId, v => pl.vaultId = v),
            jellyfish_buffer_1.ComposableBuffer.single(() => pl.from, v => pl.from = v, v => new tx_composer_1.CScript(v)),
            jellyfish_buffer_1.ComposableBuffer.compactSizeArray(() => pl.loans, v => pl.loans = v, v => new CTokenPayback(v))
        ];
    }
}
exports.CPaybackLoanV2 = CPaybackLoanV2;
CPaybackLoanV2.OP_CODE = 0x6B; // 'k'
CPaybackLoanV2.OP_NAME = 'OP_DEFI_TX_PAYBACK_LOAN_V2';
/**
 * @deprecated
 */
__exportStar(require("./dftx_vault"), exports);
//# sourceMappingURL=dftx_loans.js.map