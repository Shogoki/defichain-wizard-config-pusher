import { StaticCode } from './opcode';
/**
 * 1 is added to the input.
 */
export declare class OP_1ADD extends StaticCode {
    constructor();
}
/**
 * 1 is subtracted from the input.
 */
export declare class OP_1SUB extends StaticCode {
    constructor();
}
/**
 * The input is multiplied by 2. disabled.
 */
export declare class OP_2MUL extends StaticCode {
    constructor();
}
/**
 * The input is divided by 2. disabled.
 */
export declare class OP_2DIV extends StaticCode {
    constructor();
}
/**
 * The sign of the input is flipped.
 */
export declare class OP_NEGATE extends StaticCode {
    constructor();
}
/**
 *  The input is made positive.
 */
export declare class OP_ABS extends StaticCode {
    constructor();
}
/**
 * If the input is 0 or 1, it is flipped. Otherwise the output will be 0.
 */
export declare class OP_NOT extends StaticCode {
    constructor();
}
/**
 * Returns 0 if the input is 0. 1 otherwise.
 */
export declare class OP_0NOTEQUAL extends StaticCode {
    constructor();
}
/**
 * a is added to b.
 */
export declare class OP_ADD extends StaticCode {
    constructor();
}
/**
 * b is subtracted from a.
 */
export declare class OP_SUB extends StaticCode {
    constructor();
}
/**
 * a is multiplied by b. disabled.
 */
export declare class OP_MUL extends StaticCode {
    constructor();
}
/**
 * a is divided by b. disabled.
 */
export declare class OP_DIV extends StaticCode {
    constructor();
}
/**
 * Returns the remainder after dividing a by b. disabled.
 */
export declare class OP_MOD extends StaticCode {
    constructor();
}
/**
 * Shifts a left b bits, preserving sign. disabled.
 */
export declare class OP_LSHIFT extends StaticCode {
    constructor();
}
/**
 * Shifts a right b bits, preserving sign. disabled.
 */
export declare class OP_RSHIFT extends StaticCode {
    constructor();
}
/**
 * If both a and b are not 0, the output is 1. Otherwise 0.
 */
export declare class OP_BOOLAND extends StaticCode {
    constructor();
}
/**
 * If a or b is not 0, the output is 1. Otherwise 0.
 */
export declare class OP_BOOLOR extends StaticCode {
    constructor();
}
/**
 * Returns 1 if the numbers are equal, 0 otherwise.
 */
export declare class OP_NUMEQUAL extends StaticCode {
    constructor();
}
/**
 * Same as OP_NUMEQUAL, but runs OP_VERIFY afterward.
 */
export declare class OP_NUMEQUALVERIFY extends StaticCode {
    constructor();
}
/**
 * Returns 1 if the numbers are not equal, 0 otherwise.
 */
export declare class OP_NUMNOTEQUAL extends StaticCode {
    constructor();
}
/**
 * Returns 1 if a is less than b, 0 otherwise.
 */
export declare class OP_LESSTHAN extends StaticCode {
    constructor();
}
/**
 * Returns 1 if a is greater than b, 0 otherwise.
 */
export declare class OP_GREATERTHAN extends StaticCode {
    constructor();
}
/**
 * Returns 1 if a is less than or equal to b, 0 otherwise.
 */
export declare class OP_LESSTHANOREQUAL extends StaticCode {
    constructor();
}
/**
 *  Returns 1 if a is greater than or equal to b, 0 otherwise.
 */
export declare class OP_GREATERTHANOREQUAL extends StaticCode {
    constructor();
}
/**
 *  Returns the smaller of a and b.
 */
export declare class OP_MIN extends StaticCode {
    constructor();
}
/**
 *  Returns the larger of a and b.
 */
export declare class OP_MAX extends StaticCode {
    constructor();
}
/**
 *   Returns 1 if x is within the specified range (left-inclusive), 0 otherwise.
 */
export declare class OP_WITHIN extends StaticCode {
    constructor();
}
//# sourceMappingURL=arithmetic.d.ts.map