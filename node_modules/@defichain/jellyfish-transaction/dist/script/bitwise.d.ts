import { StaticCode } from './opcode';
/**
 * Flips all of the bits in the input.
 */
export declare class OP_INVERT extends StaticCode {
    constructor();
}
/**
 * Boolean AND between each bit in the inputs.
 */
export declare class OP_AND extends StaticCode {
    constructor();
}
/**
 * Boolean OR between each bit in the inputs.
 */
export declare class OP_OR extends StaticCode {
    constructor();
}
/**
 * Boolean exclusive OR between each bit in the inputs.
 */
export declare class OP_XOR extends StaticCode {
    constructor();
}
/**
 * Returns 1 if the inputs are exactly equal, 0 otherwise.
 */
export declare class OP_EQUAL extends StaticCode {
    constructor();
}
/**
 * Same as OP_EQUAL, but runs OP_VERIFY afterward.
 */
export declare class OP_EQUALVERIFY extends StaticCode {
    constructor();
}
/**
 * Transaction is invalid unless occuring in an unexecuted OP_IF branch.
 */
export declare class OP_RESERVED1 extends StaticCode {
    constructor();
}
/**
 * Transaction is invalid unless occuring in an unexecuted OP_IF branch.
 */
export declare class OP_RESERVED2 extends StaticCode {
    constructor();
}
//# sourceMappingURL=bitwise.d.ts.map