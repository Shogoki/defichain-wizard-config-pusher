"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OP_16 = exports.OP_15 = exports.OP_14 = exports.OP_13 = exports.OP_12 = exports.OP_11 = exports.OP_10 = exports.OP_9 = exports.OP_8 = exports.OP_7 = exports.OP_6 = exports.OP_5 = exports.OP_4 = exports.OP_3 = exports.OP_2 = exports.OP_TRUE = exports.OP_1 = exports.OP_RESERVED = exports.OP_1NEGATE = exports.OP_FALSE = exports.OP_0 = void 0;
const opcode_1 = require("./opcode");
/**
 * An empty array of bytes is pushed onto the stack.
 * (This is not a no-op: an item is added to the stack.)
 * @see OP_FALSE
 */
class OP_0 extends opcode_1.StaticCode {
    constructor() {
        super(0x00, 'OP_0');
    }
}
exports.OP_0 = OP_0;
/**
 * An empty array of bytes is pushed onto the stack.
 * (This is not a no-op: an item is added to the stack.)
 * @see OP_0
 */
class OP_FALSE extends OP_0 {
}
exports.OP_FALSE = OP_FALSE;
/**
 * The number -1 is pushed onto the stack.
 */
class OP_1NEGATE extends opcode_1.StaticCode {
    constructor() {
        super(0x4f, 'OP_1NEGATE');
    }
}
exports.OP_1NEGATE = OP_1NEGATE;
/**
 * Transaction is invalid unless occuring in an unexecuted OP_IF branch.
 */
class OP_RESERVED extends opcode_1.StaticCode {
    constructor() {
        super(0x50, 'OP_RESERVED');
    }
}
exports.OP_RESERVED = OP_RESERVED;
/**
 * The number 1 is pushed onto the stack.
 * @see OP_TRUE
 */
class OP_1 extends opcode_1.StaticCode {
    constructor() {
        super(0x51, 'OP_1');
    }
}
exports.OP_1 = OP_1;
/**
 * The number 1 is pushed onto the stack.
 * @see OP_1
 */
class OP_TRUE extends OP_1 {
}
exports.OP_TRUE = OP_TRUE;
/**
 * The number 2 is pushed onto the stack.
 */
class OP_2 extends opcode_1.StaticCode {
    constructor() {
        super(0x52, 'OP_2');
    }
}
exports.OP_2 = OP_2;
/**
 * The number 3 is pushed onto the stack.
 */
class OP_3 extends opcode_1.StaticCode {
    constructor() {
        super(0x53, 'OP_3');
    }
}
exports.OP_3 = OP_3;
/**
 * The number 4 is pushed onto the stack.
 */
class OP_4 extends opcode_1.StaticCode {
    constructor() {
        super(0x54, 'OP_4');
    }
}
exports.OP_4 = OP_4;
/**
 * The number 5 is pushed onto the stack.
 */
class OP_5 extends opcode_1.StaticCode {
    constructor() {
        super(0x55, 'OP_5');
    }
}
exports.OP_5 = OP_5;
/**
 * The number 6 is pushed onto the stack.
 */
class OP_6 extends opcode_1.StaticCode {
    constructor() {
        super(0x56, 'OP_6');
    }
}
exports.OP_6 = OP_6;
/**
 * The number 7 is pushed onto the stack.
 */
class OP_7 extends opcode_1.StaticCode {
    constructor() {
        super(0x57, 'OP_7');
    }
}
exports.OP_7 = OP_7;
/**
 * The number 8 is pushed onto the stack.
 */
class OP_8 extends opcode_1.StaticCode {
    constructor() {
        super(0x58, 'OP_8');
    }
}
exports.OP_8 = OP_8;
/**
 * The number 9 is pushed onto the stack.
 */
class OP_9 extends opcode_1.StaticCode {
    constructor() {
        super(0x59, 'OP_9');
    }
}
exports.OP_9 = OP_9;
/**
 * The number 10 is pushed onto the stack.
 */
class OP_10 extends opcode_1.StaticCode {
    constructor() {
        super(0x5a, 'OP_10');
    }
}
exports.OP_10 = OP_10;
/**
 * The number 11 is pushed onto the stack.
 */
class OP_11 extends opcode_1.StaticCode {
    constructor() {
        super(0x5b, 'OP_11');
    }
}
exports.OP_11 = OP_11;
/**
 * The number 12 is pushed onto the stack.
 */
class OP_12 extends opcode_1.StaticCode {
    constructor() {
        super(0x5c, 'OP_12');
    }
}
exports.OP_12 = OP_12;
/**
 * The number 13 is pushed onto the stack.
 */
class OP_13 extends opcode_1.StaticCode {
    constructor() {
        super(0x5d, 'OP_13');
    }
}
exports.OP_13 = OP_13;
/**
 * The number 14 is pushed onto the stack.
 */
class OP_14 extends opcode_1.StaticCode {
    constructor() {
        super(0x5e, 'OP_14');
    }
}
exports.OP_14 = OP_14;
/**
 * The number 15 is pushed onto the stack.
 */
class OP_15 extends opcode_1.StaticCode {
    constructor() {
        super(0x5f, 'OP_15');
    }
}
exports.OP_15 = OP_15;
/**
 * The number 16 is pushed onto the stack.
 */
class OP_16 extends opcode_1.StaticCode {
    constructor() {
        super(0x60, 'OP_16');
    }
}
exports.OP_16 = OP_16;
//# sourceMappingURL=constants.js.map