import { StaticCode } from './opcode';
/**
 * Does nothing.
 */
export declare class OP_NOP extends StaticCode {
    constructor();
}
/**
 * Puts the version of the protocol under which this transaction will be evaluated onto the stack.
 */
export declare class OP_VER extends StaticCode {
    constructor();
}
/**
 * If the top stack value is true, the statements are executed
 */
export declare class OP_IF extends StaticCode {
    constructor();
}
/**
 * If the top stack value is false, the statements are executed.
 */
export declare class OP_NOTIF extends StaticCode {
    constructor();
}
/**
 * If the top stack value is equal to the version of the protocol under which
 * this transaction will be evaluated, the statements between IF and ELSE are executed.
 */
export declare class OP_VERIF extends StaticCode {
    constructor();
}
/**
 *  If the top stack value is not equal to the version of the protocol under which this
 *  transaction will be evaluated, the statements between IF and ELSE are executed.
 */
export declare class OP_VERNOTIF extends StaticCode {
    constructor();
}
/**
 * If the preceding OP_IF or OP_NOTIF or OP_ELSE was not executed then these
 * statements are and otherwise if executed.
 */
export declare class OP_ELSE extends StaticCode {
    constructor();
}
/**
 * Ends an if/else block. All blocks must end, or the transaction is invalid.
 */
export declare class OP_ENDIF extends StaticCode {
    constructor();
}
/**
 * Marks transaction as invalid if top stack value is not true.
 */
export declare class OP_VERIFY extends StaticCode {
    constructor();
}
/**
 * Marks transaction as invalid.
 */
export declare class OP_RETURN extends StaticCode {
    constructor();
}
//# sourceMappingURL=control.d.ts.map